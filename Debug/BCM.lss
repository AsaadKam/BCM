
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000a4a  00000ade  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006e  0080006e  00000aec  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000b40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001235  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c4  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190b  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  000041fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  00004610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*- GLOBAL STATIC VARIABLES -------------------------------*/
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
/*- APIs IMPLEMENTATION -----------------------------------*/
int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0xa>
  9c:	0f 92       	push	r0
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	/*The array that we will send to the BCM receiver*/
	uint8_t u8_BCM_array[BCM_ARR_SIZE]="#30tieB";
  a2:	27 e0       	ldi	r18, 0x07	; 7
  a4:	e1 e6       	ldi	r30, 0x61	; 97
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	dc 01       	movw	r26, r24
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	2a 95       	dec	r18
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1c>
    /*Initalize the BCM*/
    BCM_Init(&BCM_UART_TX_Trans_Config);
  b6:	88 e6       	ldi	r24, 0x68	; 104
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 a2 04 	call	0x944	; 0x944 <BCM_Init>
    DIO_INIT_Pin(0,1);
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 71 00 	call	0xe2	; 0xe2 <DIO_INIT_Pin>
    DIO_INIT_Pin(1,1);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 71 00 	call	0xe2	; 0xe2 <DIO_INIT_Pin>
    BCM_Setup_Receive(u8_BCM_array,BCM_ARR_SIZE);
  d6:	67 e0       	ldi	r22, 0x07	; 7
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 06 05 	call	0xa0c	; 0xa0c <BCM_Setup_Receive>
	while(1)
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x4e>

000000e2 <DIO_INIT_Pin>:
		break;
}
return ERROR_OK;
}
uint8_t DIO_INIT_Pin(uint8_t pin, uint8_t direction)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	00 d0       	rcall	.+0      	; 0xe8 <DIO_INIT_Pin+0x6>
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	8a 83       	std	Y+2, r24	; 0x02
  f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t por;

	if(pin>=PinsNeeded || pin>=No_of_pins ) return 0;
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	80 32       	cpi	r24, 0x20	; 32
  f6:	18 f4       	brcc	.+6      	; 0xfe <DIO_INIT_Pin+0x1c>
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	80 32       	cpi	r24, 0x20	; 32
  fc:	10 f0       	brcs	.+4      	; 0x102 <DIO_INIT_Pin+0x20>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	e5 c0       	rjmp	.+458    	; 0x2cc <DIO_INIT_Pin+0x1ea>
    else
	{
	por='A'+pin/PortSize;
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	8f 5b       	subi	r24, 0xBF	; 191
 10c:	89 83       	std	Y+1, r24	; 0x01
	pin=pin%PortSize;
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	87 70       	andi	r24, 0x07	; 7
 112:	8a 83       	std	Y+2, r24	; 0x02
	}
	
    switch(por)
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	84 34       	cpi	r24, 0x44	; 68
 11c:	91 05       	cpc	r25, r1
 11e:	09 f4       	brne	.+2      	; 0x122 <DIO_INIT_Pin+0x40>
 120:	a3 c0       	rjmp	.+326    	; 0x268 <DIO_INIT_Pin+0x186>
 122:	85 34       	cpi	r24, 0x45	; 69
 124:	91 05       	cpc	r25, r1
 126:	0c f0       	brlt	.+2      	; 0x12a <DIO_INIT_Pin+0x48>
 128:	ce c0       	rjmp	.+412    	; 0x2c6 <DIO_INIT_Pin+0x1e4>
 12a:	83 34       	cpi	r24, 0x43	; 67
 12c:	91 05       	cpc	r25, r1
 12e:	09 f4       	brne	.+2      	; 0x132 <DIO_INIT_Pin+0x50>
 130:	6b c0       	rjmp	.+214    	; 0x208 <DIO_INIT_Pin+0x126>
 132:	84 34       	cpi	r24, 0x44	; 68
 134:	91 05       	cpc	r25, r1
 136:	0c f0       	brlt	.+2      	; 0x13a <DIO_INIT_Pin+0x58>
 138:	c6 c0       	rjmp	.+396    	; 0x2c6 <DIO_INIT_Pin+0x1e4>
 13a:	81 34       	cpi	r24, 0x41	; 65
 13c:	91 05       	cpc	r25, r1
 13e:	21 f0       	breq	.+8      	; 0x148 <DIO_INIT_Pin+0x66>
 140:	82 34       	cpi	r24, 0x42	; 66
 142:	91 05       	cpc	r25, r1
 144:	89 f1       	breq	.+98     	; 0x1a8 <DIO_INIT_Pin+0xc6>
 146:	bf c0       	rjmp	.+382    	; 0x2c6 <DIO_INIT_Pin+0x1e4>
    {
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	88 23       	and	r24, r24
 14c:	b9 f4       	brne	.+46     	; 0x17c <DIO_INIT_Pin+0x9a>
 14e:	8a e3       	ldi	r24, 0x3A	; 58
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_INIT_Pin+0x86>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	2a 95       	dec	r18
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_INIT_Pin+0x82>
 16c:	80 95       	com	r24
 16e:	24 2f       	mov	r18, r20
 170:	28 23       	and	r18, r24
 172:	8a e3       	ldi	r24, 0x3A	; 58
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
              break;
 17a:	a7 c0       	rjmp	.+334    	; 0x2ca <DIO_INIT_Pin+0x1e8>
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 17c:	8a e3       	ldi	r24, 0x3A	; 58
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_INIT_Pin+0xb4>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	2a 95       	dec	r18
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_INIT_Pin+0xb0>
 19a:	24 2f       	mov	r18, r20
 19c:	28 2b       	or	r18, r24
 19e:	8a e3       	ldi	r24, 0x3A	; 58
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
              break;
 1a6:	91 c0       	rjmp	.+290    	; 0x2ca <DIO_INIT_Pin+0x1e8>

    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	88 23       	and	r24, r24
 1ac:	b9 f4       	brne	.+46     	; 0x1dc <DIO_INIT_Pin+0xfa>
 1ae:	87 e3       	ldi	r24, 0x37	; 55
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_INIT_Pin+0xe6>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	2a 95       	dec	r18
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_INIT_Pin+0xe2>
 1cc:	80 95       	com	r24
 1ce:	24 2f       	mov	r18, r20
 1d0:	28 23       	and	r18, r24
 1d2:	87 e3       	ldi	r24, 0x37	; 55
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
              break;
 1da:	77 c0       	rjmp	.+238    	; 0x2ca <DIO_INIT_Pin+0x1e8>
    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 1dc:	87 e3       	ldi	r24, 0x37	; 55
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	48 2f       	mov	r20, r24
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_INIT_Pin+0x114>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	2a 95       	dec	r18
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_INIT_Pin+0x110>
 1fa:	24 2f       	mov	r18, r20
 1fc:	28 2b       	or	r18, r24
 1fe:	87 e3       	ldi	r24, 0x37	; 55
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
              break;
 206:	61 c0       	rjmp	.+194    	; 0x2ca <DIO_INIT_Pin+0x1e8>

    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	88 23       	and	r24, r24
 20c:	b9 f4       	brne	.+46     	; 0x23c <DIO_INIT_Pin+0x15a>
 20e:	84 e3       	ldi	r24, 0x34	; 52
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_INIT_Pin+0x146>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	2a 95       	dec	r18
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_INIT_Pin+0x142>
 22c:	80 95       	com	r24
 22e:	24 2f       	mov	r18, r20
 230:	28 23       	and	r18, r24
 232:	84 e3       	ldi	r24, 0x34	; 52
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
              break;
 23a:	47 c0       	rjmp	.+142    	; 0x2ca <DIO_INIT_Pin+0x1e8>
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 23c:	84 e3       	ldi	r24, 0x34	; 52
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_INIT_Pin+0x174>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	2a 95       	dec	r18
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_INIT_Pin+0x170>
 25a:	24 2f       	mov	r18, r20
 25c:	28 2b       	or	r18, r24
 25e:	84 e3       	ldi	r24, 0x34	; 52
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
              break;
 266:	31 c0       	rjmp	.+98     	; 0x2ca <DIO_INIT_Pin+0x1e8>

    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	88 23       	and	r24, r24
 26c:	b9 f4       	brne	.+46     	; 0x29c <DIO_INIT_Pin+0x1ba>
 26e:	81 e3       	ldi	r24, 0x31	; 49
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_INIT_Pin+0x1a6>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	2a 95       	dec	r18
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_INIT_Pin+0x1a2>
 28c:	80 95       	com	r24
 28e:	24 2f       	mov	r18, r20
 290:	28 23       	and	r18, r24
 292:	81 e3       	ldi	r24, 0x31	; 49
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
 29a:	15 c0       	rjmp	.+42     	; 0x2c6 <DIO_INIT_Pin+0x1e4>
 29c:	81 e3       	ldi	r24, 0x31	; 49
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	48 2f       	mov	r20, r24
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	28 2f       	mov	r18, r24
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_INIT_Pin+0x1d4>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	2a 95       	dec	r18
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_INIT_Pin+0x1d0>
 2ba:	24 2f       	mov	r18, r20
 2bc:	28 2b       	or	r18, r24
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
			  break;
	case 'G': if(direction==0){CLR_BIT(DDRG,pin);}else{SET_BIT(DDRG,pin);}
			  break;
#endif
	default :
	return ERROR_NOK;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <DIO_INIT_Pin+0x1ea>
	break;
	}
return ERROR_OK;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
}
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <DIO_Write_Pin>:
	break;
	}
return ERROR_OK;
}
uint8_t DIO_Write_Pin(uint8_t pin,uint8_t BitValue)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <DIO_Write_Pin+0x6>
 2de:	0f 92       	push	r0
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t por;
 	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	80 32       	cpi	r24, 0x20	; 32
 2ec:	18 f4       	brcc	.+6      	; 0x2f4 <DIO_Write_Pin+0x1c>
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	80 32       	cpi	r24, 0x20	; 32
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <DIO_Write_Pin+0x20>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	e6 c0       	rjmp	.+460    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 	else
 	{
	 	por='A'+pin/PortSize;
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	86 95       	lsr	r24
 2fc:	86 95       	lsr	r24
 2fe:	86 95       	lsr	r24
 300:	8f 5b       	subi	r24, 0xBF	; 191
 302:	89 83       	std	Y+1, r24	; 0x01
	 	pin=pin%PortSize;
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	87 70       	andi	r24, 0x07	; 7
 308:	8a 83       	std	Y+2, r24	; 0x02
 	}
	 
    switch(por)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	88 2f       	mov	r24, r24
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	84 34       	cpi	r24, 0x44	; 68
 312:	91 05       	cpc	r25, r1
 314:	09 f4       	brne	.+2      	; 0x318 <DIO_Write_Pin+0x40>
 316:	a3 c0       	rjmp	.+326    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 318:	85 34       	cpi	r24, 0x45	; 69
 31a:	91 05       	cpc	r25, r1
 31c:	0c f0       	brlt	.+2      	; 0x320 <DIO_Write_Pin+0x48>
 31e:	cf c0       	rjmp	.+414    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 320:	83 34       	cpi	r24, 0x43	; 67
 322:	91 05       	cpc	r25, r1
 324:	09 f4       	brne	.+2      	; 0x328 <DIO_Write_Pin+0x50>
 326:	6b c0       	rjmp	.+214    	; 0x3fe <DIO_Write_Pin+0x126>
 328:	84 34       	cpi	r24, 0x44	; 68
 32a:	91 05       	cpc	r25, r1
 32c:	0c f0       	brlt	.+2      	; 0x330 <DIO_Write_Pin+0x58>
 32e:	c7 c0       	rjmp	.+398    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 330:	81 34       	cpi	r24, 0x41	; 65
 332:	91 05       	cpc	r25, r1
 334:	21 f0       	breq	.+8      	; 0x33e <DIO_Write_Pin+0x66>
 336:	82 34       	cpi	r24, 0x42	; 66
 338:	91 05       	cpc	r25, r1
 33a:	89 f1       	breq	.+98     	; 0x39e <DIO_Write_Pin+0xc6>
 33c:	c0 c0       	rjmp	.+384    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
    {
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	88 23       	and	r24, r24
 342:	b9 f4       	brne	.+46     	; 0x372 <DIO_Write_Pin+0x9a>
 344:	8b e3       	ldi	r24, 0x3B	; 59
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	80 81       	ld	r24, Z
 34c:	48 2f       	mov	r20, r24
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_Write_Pin+0x86>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	2a 95       	dec	r18
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_Write_Pin+0x82>
 362:	80 95       	com	r24
 364:	24 2f       	mov	r18, r20
 366:	28 23       	and	r18, r24
 368:	8b e3       	ldi	r24, 0x3B	; 59
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
              break;
 370:	a8 c0       	rjmp	.+336    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
 372:	8b e3       	ldi	r24, 0x3B	; 59
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	fc 01       	movw	r30, r24
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_Write_Pin+0xb4>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_Write_Pin+0xb0>
 390:	24 2f       	mov	r18, r20
 392:	28 2b       	or	r18, r24
 394:	8b e3       	ldi	r24, 0x3B	; 59
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
              break;
 39c:	92 c0       	rjmp	.+292    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>

    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 23       	and	r24, r24
 3a2:	b9 f4       	brne	.+46     	; 0x3d2 <DIO_Write_Pin+0xfa>
 3a4:	88 e3       	ldi	r24, 0x38	; 56
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_Write_Pin+0xe6>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	2a 95       	dec	r18
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_Write_Pin+0xe2>
 3c2:	80 95       	com	r24
 3c4:	24 2f       	mov	r18, r20
 3c6:	28 23       	and	r18, r24
 3c8:	88 e3       	ldi	r24, 0x38	; 56
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
              break;
 3d0:	78 c0       	rjmp	.+240    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
 3d2:	88 e3       	ldi	r24, 0x38	; 56
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	80 81       	ld	r24, Z
 3da:	48 2f       	mov	r20, r24
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_Write_Pin+0x114>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	2a 95       	dec	r18
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_Write_Pin+0x110>
 3f0:	24 2f       	mov	r18, r20
 3f2:	28 2b       	or	r18, r24
 3f4:	88 e3       	ldi	r24, 0x38	; 56
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
              break;
 3fc:	62 c0       	rjmp	.+196    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>

    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	88 23       	and	r24, r24
 402:	b9 f4       	brne	.+46     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	2a 95       	dec	r18
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	80 95       	com	r24
 424:	24 2f       	mov	r18, r20
 426:	28 23       	and	r18, r24
 428:	85 e3       	ldi	r24, 0x35	; 53
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
              break;
 430:	48 c0       	rjmp	.+144    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
 432:	85 e3       	ldi	r24, 0x35	; 53
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	2a 95       	dec	r18
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	24 2f       	mov	r18, r20
 452:	28 2b       	or	r18, r24
 454:	85 e3       	ldi	r24, 0x35	; 53
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
              break;
 45c:	32 c0       	rjmp	.+100    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>

    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	88 23       	and	r24, r24
 462:	b9 f4       	brne	.+46     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 464:	82 e3       	ldi	r24, 0x32	; 50
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	2a 95       	dec	r18
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	80 95       	com	r24
 484:	24 2f       	mov	r18, r20
 486:	28 23       	and	r18, r24
 488:	82 e3       	ldi	r24, 0x32	; 50
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
              break;
 490:	18 c0       	rjmp	.+48     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
 492:	82 e3       	ldi	r24, 0x32	; 50
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	2a 95       	dec	r18
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	24 2f       	mov	r18, r20
 4b2:	28 2b       	or	r18, r24
 4b4:	82 e3       	ldi	r24, 0x32	; 50
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
              break;
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	case 'G': if(BitValue==0){CLR_BIT(PORTG,pin);}else{SET_BIT(PORTG,pin);}
			  break;	
			  
	#endif
	default :
	return ERROR_NOK;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	break;
	}
	return ERROR_OK;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
}
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <DIO_toggle_Pin>:
		break;
		}
return ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <DIO_toggle_Pin+0x6>
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	80 32       	cpi	r24, 0x20	; 32
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <DIO_toggle_Pin+0x18>
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	80 32       	cpi	r24, 0x20	; 32
 4e6:	10 f0       	brcs	.+4      	; 0x4ec <DIO_toggle_Pin+0x1c>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	7d c0       	rjmp	.+250    	; 0x5e6 <DIO_toggle_Pin+0x116>
	else
	{
		por='A'+pin/PortSize;
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	86 95       	lsr	r24
 4f0:	86 95       	lsr	r24
 4f2:	86 95       	lsr	r24
 4f4:	8f 5b       	subi	r24, 0xBF	; 191
 4f6:	89 83       	std	Y+1, r24	; 0x01
		pin=pin%PortSize;
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	87 70       	andi	r24, 0x07	; 7
 4fc:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	switch(por)
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	84 34       	cpi	r24, 0x44	; 68
 506:	91 05       	cpc	r25, r1
 508:	09 f4       	brne	.+2      	; 0x50c <DIO_toggle_Pin+0x3c>
 50a:	54 c0       	rjmp	.+168    	; 0x5b4 <DIO_toggle_Pin+0xe4>
 50c:	85 34       	cpi	r24, 0x45	; 69
 50e:	91 05       	cpc	r25, r1
 510:	0c f0       	brlt	.+2      	; 0x514 <DIO_toggle_Pin+0x44>
 512:	66 c0       	rjmp	.+204    	; 0x5e0 <DIO_toggle_Pin+0x110>
 514:	83 34       	cpi	r24, 0x43	; 67
 516:	91 05       	cpc	r25, r1
 518:	b9 f1       	breq	.+110    	; 0x588 <DIO_toggle_Pin+0xb8>
 51a:	84 34       	cpi	r24, 0x44	; 68
 51c:	91 05       	cpc	r25, r1
 51e:	0c f0       	brlt	.+2      	; 0x522 <DIO_toggle_Pin+0x52>
 520:	5f c0       	rjmp	.+190    	; 0x5e0 <DIO_toggle_Pin+0x110>
 522:	81 34       	cpi	r24, 0x41	; 65
 524:	91 05       	cpc	r25, r1
 526:	21 f0       	breq	.+8      	; 0x530 <DIO_toggle_Pin+0x60>
 528:	82 34       	cpi	r24, 0x42	; 66
 52a:	91 05       	cpc	r25, r1
 52c:	b9 f0       	breq	.+46     	; 0x55c <DIO_toggle_Pin+0x8c>
 52e:	58 c0       	rjmp	.+176    	; 0x5e0 <DIO_toggle_Pin+0x110>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 530:	8b e3       	ldi	r24, 0x3B	; 59
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fc 01       	movw	r30, r24
 536:	80 81       	ld	r24, Z
 538:	48 2f       	mov	r20, r24
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	28 2f       	mov	r18, r24
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_toggle_Pin+0x7a>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	2a 95       	dec	r18
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_toggle_Pin+0x76>
 54e:	24 2f       	mov	r18, r20
 550:	28 27       	eor	r18, r24
 552:	8b e3       	ldi	r24, 0x3B	; 59
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
			 break;
 55a:	44 c0       	rjmp	.+136    	; 0x5e4 <DIO_toggle_Pin+0x114>
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 55c:	88 e3       	ldi	r24, 0x38	; 56
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_toggle_Pin+0xa6>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	2a 95       	dec	r18
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_toggle_Pin+0xa2>
 57a:	24 2f       	mov	r18, r20
 57c:	28 27       	eor	r18, r24
 57e:	88 e3       	ldi	r24, 0x38	; 56
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
			 break;
 586:	2e c0       	rjmp	.+92     	; 0x5e4 <DIO_toggle_Pin+0x114>
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 588:	85 e3       	ldi	r24, 0x35	; 53
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_toggle_Pin+0xd2>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	2a 95       	dec	r18
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_toggle_Pin+0xce>
 5a6:	24 2f       	mov	r18, r20
 5a8:	28 27       	eor	r18, r24
 5aa:	85 e3       	ldi	r24, 0x35	; 53
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
			 break;
 5b2:	18 c0       	rjmp	.+48     	; 0x5e4 <DIO_toggle_Pin+0x114>
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 5b4:	82 e3       	ldi	r24, 0x32	; 50
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	fc 01       	movw	r30, r24
 5ba:	80 81       	ld	r24, Z
 5bc:	48 2f       	mov	r20, r24
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	28 2f       	mov	r18, r24
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_toggle_Pin+0xfe>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	2a 95       	dec	r18
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_toggle_Pin+0xfa>
 5d2:	24 2f       	mov	r18, r20
 5d4:	28 27       	eor	r18, r24
 5d6:	82 e3       	ldi	r24, 0x32	; 50
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
			 break;
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_toggle_Pin+0x114>
			 break;
		case 'G':TOGGLE_BIT(PORTG,pin);
			 break;
#endif
		default :
		return ERROR_NOK;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <DIO_toggle_Pin+0x116>
		break;
		
	}
	return ERROR_OK;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
}
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <__vector_13>:
#endif

/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

void __vector_13(void)
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62

#elif UART_ISR_WITH_FLAG==COUNTER

gu8_Uart_rec_char_counter++;
#elif UART_ISR_WITH_FLAG==CALLBACK
gPntrToFunc_UART_RX_ISR();
 61a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gPntrToFunc_UART_RX_ISR>
 61e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gPntrToFunc_UART_RX_ISR+0x1>
 622:	fc 01       	movw	r30, r24
 624:	09 95       	icall
#endif

	
}
 626:	00 00       	nop
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <__vector_15>:

void __vector_15(void)
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62

gu8_Uart_send_char_counter=1U;

#endif

DIO_toggle_Pin(15);
 656:	8f e0       	ldi	r24, 0x0F	; 15
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_toggle_Pin>
}
 65e:	00 00       	nop
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <UART_SetCallBack>:

/*- APIs IMPLEMENTATION -----------------------------------*/
UART_Error_t UART_SetCallBack(PntrToFunc_t PntrToFunc_Copy_UART_tX_USER_ISR, PntrToFunc_t PntrToFunc_Copy_UART_RX_USER_ISR)
{
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	00 d0       	rcall	.+0      	; 0x66c <UART_SetCallBack+0x6>
 66c:	00 d0       	rcall	.+0      	; 0x66e <UART_SetCallBack+0x8>
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	9a 83       	std	Y+2, r25	; 0x02
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	7c 83       	std	Y+4, r23	; 0x04
 678:	6b 83       	std	Y+3, r22	; 0x03

  if(sgu8_UART_Execution_Mode==UART_Interrupt_mode_enable)
 67a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <sgu8_UART_Execution_Mode>
 67e:	8a 30       	cpi	r24, 0x0A	; 10
 680:	a1 f4       	brne	.+40     	; 0x6aa <UART_SetCallBack+0x44>
  {

	if(NullPointer!=PntrToFunc_Copy_UART_tX_USER_ISR)
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	9a 81       	ldd	r25, Y+2	; 0x02
 686:	89 2b       	or	r24, r25
 688:	31 f0       	breq	.+12     	; 0x696 <UART_SetCallBack+0x30>
	{
		gPntrToFunc_UART_tX_ISR=PntrToFunc_Copy_UART_tX_USER_ISR;   
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	9a 81       	ldd	r25, Y+2	; 0x02
 68e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 692:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
	}
	else
	{
	}
	if(NullPointer!=PntrToFunc_Copy_UART_RX_USER_ISR)
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	9c 81       	ldd	r25, Y+4	; 0x04
 69a:	89 2b       	or	r24, r25
 69c:	31 f0       	breq	.+12     	; 0x6aa <UART_SetCallBack+0x44>
	{
	   gPntrToFunc_UART_RX_ISR=PntrToFunc_Copy_UART_RX_USER_ISR;     
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	9c 81       	ldd	r25, Y+4	; 0x04
 6a2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gPntrToFunc_UART_RX_ISR+0x1>
 6a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <gPntrToFunc_UART_RX_ISR>
  }
  else
  {
  }

}
 6aa:	00 00       	nop
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <UART_Init>:
 * Input     : (char_t* pchar_index)It takes pointer to char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

UART_Error_t UART_Init(UART_Confg_Stuct_t* pstr_Config_UART)
{
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <UART_Init+0x6>
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	9a 83       	std	Y+2, r25	; 0x02
 6c6:	89 83       	std	Y+1, r24	; 0x01

    if(pstr_Config_UART!=NullPointer)
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	9a 81       	ldd	r25, Y+2	; 0x02
 6cc:	89 2b       	or	r24, r25
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <UART_Init+0x18>
 6d0:	09 c1       	rjmp	.+530    	; 0x8e4 <__stack+0x85>
	{
		/**Set baud rate**/
		UART_BAUD_RATE_REG_HIGH = (uint8_t)((pstr_Config_UART->BaudRate)>>8);
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	9a 81       	ldd	r25, Y+2	; 0x02
 6d6:	fc 01       	movw	r30, r24
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	29 2f       	mov	r18, r25
 6e0:	33 27       	eor	r19, r19
 6e2:	27 fd       	sbrc	r18, 7
 6e4:	3a 95       	dec	r19
 6e6:	80 e4       	ldi	r24, 0x40	; 64
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
		UART_BAUD_RATE_REG_LOW =  (uint8_t) (pstr_Config_UART->BaudRate);
 6ee:	89 e2       	ldi	r24, 0x29	; 41
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	29 81       	ldd	r18, Y+1	; 0x01
 6f4:	3a 81       	ldd	r19, Y+2	; 0x02
 6f6:	f9 01       	movw	r30, r18
 6f8:	22 81       	ldd	r18, Z+2	; 0x02
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 83       	st	Z, r18
		/**Enable receiver and transmitter**/

		if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	9a 81       	ldd	r25, Y+2	; 0x02
 702:	fc 01       	movw	r30, r24
 704:	80 81       	ld	r24, Z
 706:	8d 30       	cpi	r24, 0x0D	; 13
 708:	49 f4       	brne	.+18     	; 0x71c <UART_Init+0x62>
		{
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_transimter_EN_BIT);
 70a:	8a e2       	ldi	r24, 0x2A	; 42
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	fc 01       	movw	r30, r24
 710:	20 81       	ld	r18, Z
 712:	8a e2       	ldi	r24, 0x2A	; 42
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	28 60       	ori	r18, 0x08	; 8
 718:	fc 01       	movw	r30, r24
 71a:	20 83       	st	Z, r18
		}
		else
		{
		}
		if(pstr_Config_UART->Reciever==UART_Receive_Enable)
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	9a 81       	ldd	r25, Y+2	; 0x02
 720:	fc 01       	movw	r30, r24
 722:	81 81       	ldd	r24, Z+1	; 0x01
 724:	8f 30       	cpi	r24, 0x0F	; 15
 726:	49 f4       	brne	.+18     	; 0x73a <UART_Init+0x80>
		{
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_Reciever_EN_BIT);
 728:	8a e2       	ldi	r24, 0x2A	; 42
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	fc 01       	movw	r30, r24
 72e:	20 81       	ld	r18, Z
 730:	8a e2       	ldi	r24, 0x2A	; 42
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	20 61       	ori	r18, 0x10	; 16
 736:	fc 01       	movw	r30, r24
 738:	20 83       	st	Z, r18
		}	
		else
		{
		}		
		/*** Check for parity ***/
		if(pstr_Config_UART->Parity==UART_Parity_Disabled)
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	9a 81       	ldd	r25, Y+2	; 0x02
 73e:	fc 01       	movw	r30, r24
 740:	83 81       	ldd	r24, Z+3	; 0x03
 742:	88 23       	and	r24, r24
 744:	49 f4       	brne	.+18     	; 0x758 <UART_Init+0x9e>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);
 746:	20 e4       	ldi	r18, 0x40	; 64
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	80 e4       	ldi	r24, 0x40	; 64
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	f9 01       	movw	r30, r18
 750:	20 81       	ld	r18, Z
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
 756:	1f c0       	rjmp	.+62     	; 0x796 <UART_Init+0xdc>
		}
		else if(pstr_Config_UART->Parity==UART_Parity_Even)
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	9a 81       	ldd	r25, Y+2	; 0x02
 75c:	fc 01       	movw	r30, r24
 75e:	83 81       	ldd	r24, Z+3	; 0x03
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	51 f4       	brne	.+20     	; 0x778 <UART_Init+0xbe>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);			
 764:	80 e4       	ldi	r24, 0x40	; 64
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	fc 01       	movw	r30, r24
 76a:	20 81       	ld	r18, Z
 76c:	80 e4       	ldi	r24, 0x40	; 64
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	20 62       	ori	r18, 0x20	; 32
 772:	fc 01       	movw	r30, r24
 774:	20 83       	st	Z, r18
 776:	0f c0       	rjmp	.+30     	; 0x796 <UART_Init+0xdc>
		}
		else if(pstr_Config_UART->Parity==UART_Parity_Odd)
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	9a 81       	ldd	r25, Y+2	; 0x02
 77c:	fc 01       	movw	r30, r24
 77e:	83 81       	ldd	r24, Z+3	; 0x03
 780:	82 30       	cpi	r24, 0x02	; 2
 782:	49 f4       	brne	.+18     	; 0x796 <UART_Init+0xdc>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(1<<UART_Parity_Bit_0);				
 784:	80 e4       	ldi	r24, 0x40	; 64
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	fc 01       	movw	r30, r24
 78a:	20 81       	ld	r18, Z
 78c:	80 e4       	ldi	r24, 0x40	; 64
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	20 63       	ori	r18, 0x30	; 48
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
		}
		else
		{
		}
		/*** Set frame format: Stop bit***/
		if(pstr_Config_UART->Parity==UART_two_Stop_bit)
 796:	89 81       	ldd	r24, Y+1	; 0x01
 798:	9a 81       	ldd	r25, Y+2	; 0x02
 79a:	fc 01       	movw	r30, r24
 79c:	83 81       	ldd	r24, Z+3	; 0x03
 79e:	84 30       	cpi	r24, 0x04	; 4
 7a0:	51 f4       	brne	.+20     	; 0x7b6 <UART_Init+0xfc>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_STOP_setting_Bit);				
 7a2:	80 e4       	ldi	r24, 0x40	; 64
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	fc 01       	movw	r30, r24
 7a8:	20 81       	ld	r18, Z
 7aa:	80 e4       	ldi	r24, 0x40	; 64
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	28 60       	ori	r18, 0x08	; 8
 7b0:	fc 01       	movw	r30, r24
 7b2:	20 83       	st	Z, r18
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <UART_Init+0x118>
		}
		else if(pstr_Config_UART->Parity==UART_One_Stop_bit)
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ba:	fc 01       	movw	r30, r24
 7bc:	83 81       	ldd	r24, Z+3	; 0x03
 7be:	83 30       	cpi	r24, 0x03	; 3
 7c0:	41 f4       	brne	.+16     	; 0x7d2 <UART_Init+0x118>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_STOP_setting_Bit);
 7c2:	20 e4       	ldi	r18, 0x40	; 64
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	80 e4       	ldi	r24, 0x40	; 64
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	f9 01       	movw	r30, r18
 7cc:	20 81       	ld	r18, Z
 7ce:	fc 01       	movw	r30, r24
 7d0:	20 83       	st	Z, r18
		}
		else
		{
		}
		/* Set frame format:Data_size */
		if(pstr_Config_UART->Data_size==UART_Frame_5_bit_)
 7d2:	89 81       	ldd	r24, Y+1	; 0x01
 7d4:	9a 81       	ldd	r25, Y+2	; 0x02
 7d6:	fc 01       	movw	r30, r24
 7d8:	85 81       	ldd	r24, Z+5	; 0x05
 7da:	85 30       	cpi	r24, 0x05	; 5
 7dc:	49 f4       	brne	.+18     	; 0x7f0 <UART_Init+0x136>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
 7de:	20 e4       	ldi	r18, 0x40	; 64
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	80 e4       	ldi	r24, 0x40	; 64
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	f9 01       	movw	r30, r18
 7e8:	20 81       	ld	r18, Z
 7ea:	fc 01       	movw	r30, r24
 7ec:	20 83       	st	Z, r18
 7ee:	3f c0       	rjmp	.+126    	; 0x86e <__stack+0xf>
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_6_bit_)
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	9a 81       	ldd	r25, Y+2	; 0x02
 7f4:	fc 01       	movw	r30, r24
 7f6:	85 81       	ldd	r24, Z+5	; 0x05
 7f8:	86 30       	cpi	r24, 0x06	; 6
 7fa:	51 f4       	brne	.+20     	; 0x810 <UART_Init+0x156>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);
 7fc:	80 e4       	ldi	r24, 0x40	; 64
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	fc 01       	movw	r30, r24
 802:	20 81       	ld	r18, Z
 804:	80 e4       	ldi	r24, 0x40	; 64
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	22 60       	ori	r18, 0x02	; 2
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
 80e:	2f c0       	rjmp	.+94     	; 0x86e <__stack+0xf>
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_7_bit_)
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	9a 81       	ldd	r25, Y+2	; 0x02
 814:	fc 01       	movw	r30, r24
 816:	85 81       	ldd	r24, Z+5	; 0x05
 818:	87 30       	cpi	r24, 0x07	; 7
 81a:	51 f4       	brne	.+20     	; 0x830 <UART_Init+0x176>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
 81c:	80 e4       	ldi	r24, 0x40	; 64
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	fc 01       	movw	r30, r24
 822:	20 81       	ld	r18, Z
 824:	80 e4       	ldi	r24, 0x40	; 64
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	24 60       	ori	r18, 0x04	; 4
 82a:	fc 01       	movw	r30, r24
 82c:	20 83       	st	Z, r18
 82e:	1f c0       	rjmp	.+62     	; 0x86e <__stack+0xf>
		}			
		else if(pstr_Config_UART->Data_size==UART_Frame_8_bit_)
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	9a 81       	ldd	r25, Y+2	; 0x02
 834:	fc 01       	movw	r30, r24
 836:	85 81       	ldd	r24, Z+5	; 0x05
 838:	88 30       	cpi	r24, 0x08	; 8
 83a:	51 f4       	brne	.+20     	; 0x850 <UART_Init+0x196>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);			
 83c:	80 e4       	ldi	r24, 0x40	; 64
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	fc 01       	movw	r30, r24
 842:	20 81       	ld	r18, Z
 844:	80 e4       	ldi	r24, 0x40	; 64
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	26 60       	ori	r18, 0x06	; 6
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
 84e:	0f c0       	rjmp	.+30     	; 0x86e <__stack+0xf>
		}	
		else if(pstr_Config_UART->Data_size==UART_Frame_9_bit_)
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	9a 81       	ldd	r25, Y+2	; 0x02
 854:	fc 01       	movw	r30, r24
 856:	85 81       	ldd	r24, Z+5	; 0x05
 858:	89 30       	cpi	r24, 0x09	; 9
 85a:	49 f4       	brne	.+18     	; 0x86e <__stack+0xf>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);					
 85c:	80 e4       	ldi	r24, 0x40	; 64
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	fc 01       	movw	r30, r24
 862:	20 81       	ld	r18, Z
 864:	80 e4       	ldi	r24, 0x40	; 64
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	26 60       	ori	r18, 0x06	; 6
 86a:	fc 01       	movw	r30, r24
 86c:	20 83       	st	Z, r18
		}	
	    else
		{
		}
		/**Check whether it is interrupt or polling mode**/
		if(pstr_Config_UART->InterruptMode==UART_Interrupt_mode_enable)
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	9a 81       	ldd	r25, Y+2	; 0x02
 872:	fc 01       	movw	r30, r24
 874:	86 81       	ldd	r24, Z+6	; 0x06
 876:	8a 30       	cpi	r24, 0x0A	; 10
 878:	89 f5       	brne	.+98     	; 0x8dc <__stack+0x7d>
		{
			sgu8_UART_Execution_Mode=UART_Interrupt_mode_enable;
 87a:	8a e0       	ldi	r24, 0x0A	; 10
 87c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <sgu8_UART_Execution_Mode>
			/*Enable Global Interrupt*/
			EnableGeneralInterrupt();
 880:	8f e5       	ldi	r24, 0x5F	; 95
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	fc 01       	movw	r30, r24
 886:	20 81       	ld	r18, Z
 888:	8f e5       	ldi	r24, 0x5F	; 95
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	20 68       	ori	r18, 0x80	; 128
 88e:	fc 01       	movw	r30, r24
 890:	20 83       	st	Z, r18

			/*Enable Receiver Interrupt*/
		    if(pstr_Config_UART->Reciever==UART_Receive_Enable)
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	9a 81       	ldd	r25, Y+2	; 0x02
 896:	fc 01       	movw	r30, r24
 898:	81 81       	ldd	r24, Z+1	; 0x01
 89a:	8f 30       	cpi	r24, 0x0F	; 15
 89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x57>
			{
		    	UART_RXC_Enable_INT();
 89e:	8a e2       	ldi	r24, 0x2A	; 42
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	fc 01       	movw	r30, r24
 8a4:	20 81       	ld	r18, Z
 8a6:	8a e2       	ldi	r24, 0x2A	; 42
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	20 68       	ori	r18, 0x80	; 128
 8ac:	fc 01       	movw	r30, r24
 8ae:	20 83       	st	Z, r18
				sgu8_UART_Receiver_enable=UART_Receive_Enable;
 8b0:	8f e0       	ldi	r24, 0x0F	; 15
 8b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <sgu8_UART_Receiver_enable>
			else
			{
			}

			/*Enable Transimter Interrupt*/
		    if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
 8b6:	89 81       	ldd	r24, Y+1	; 0x01
 8b8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ba:	fc 01       	movw	r30, r24
 8bc:	80 81       	ld	r24, Z
 8be:	8d 30       	cpi	r24, 0x0D	; 13
 8c0:	99 f4       	brne	.+38     	; 0x8e8 <__stack+0x89>
			{
			    UART_TXC_Enable_INT();
 8c2:	8a e2       	ldi	r24, 0x2A	; 42
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	fc 01       	movw	r30, r24
 8c8:	20 81       	ld	r18, Z
 8ca:	8a e2       	ldi	r24, 0x2A	; 42
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	20 64       	ori	r18, 0x40	; 64
 8d0:	fc 01       	movw	r30, r24
 8d2:	20 83       	st	Z, r18
				sgu8_UART_Transimter_enable=UART_trasmit_Enable;
 8d4:	8d e0       	ldi	r24, 0x0D	; 13
 8d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <sgu8_UART_Transimter_enable>
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__stack+0x89>
			{
			}
		}
		else
		{
			sgu8_UART_Execution_Mode=UART_Polling_mode_enable;			
 8dc:	8b e0       	ldi	r24, 0x0B	; 11
 8de:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <sgu8_UART_Execution_Mode>
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
		}
	}
	else 
	{
		return UART_ERROR_NULL_POINTER;
 8e4:	8c e0       	ldi	r24, 0x0C	; 12
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__stack+0x89>
	}

}
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

000008f2 <BCM_UART_REC_ISR>:
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

/*- APIs IMPLEMENTATION -----------------------------------*/
/*********Called Back function of BCM receiver***********/
void BCM_UART_REC_ISR(void)
{
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
	sgu8p_BCM_RX_BUFFER[sgu8_BCM_RX_BUFFER_INDEX]=UART_DATA_REGISTER;
 8fa:	2c e2       	ldi	r18, 0x2C	; 44
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <sgu8p_BCM_RX_BUFFER>
 902:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <sgu8p_BCM_RX_BUFFER+0x1>
 906:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sgu8_BCM_RX_BUFFER_INDEX>
 90a:	88 2f       	mov	r24, r24
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	84 0f       	add	r24, r20
 910:	95 1f       	adc	r25, r21
 912:	f9 01       	movw	r30, r18
 914:	20 81       	ld	r18, Z
 916:	fc 01       	movw	r30, r24
 918:	20 83       	st	Z, r18
    if(sgu8p_BCM_RX_BUFFER[0]=='3')  DIO_Write_Pin(0,1);
 91a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <sgu8p_BCM_RX_BUFFER>
 91e:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <sgu8p_BCM_RX_BUFFER+0x1>
 922:	fc 01       	movw	r30, r24
 924:	80 81       	ld	r24, Z
 926:	83 33       	cpi	r24, 0x33	; 51
 928:	21 f4       	brne	.+8      	; 0x932 <BCM_UART_REC_ISR+0x40>
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_Write_Pin>
	sgu8_BCM_RX_BUFFER_INDEX++;
 932:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sgu8_BCM_RX_BUFFER_INDEX>
 936:	8f 5f       	subi	r24, 0xFF	; 255
 938:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <sgu8_BCM_RX_BUFFER_INDEX>
}
 93c:	00 00       	nop
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	08 95       	ret

00000944 <BCM_Init>:
/*********Init BCM*********/
BCM_ERROR_t BCM_Init(BCM_Config_t* Copy_pBCM_Config)
{
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	29 97       	sbiw	r28, 0x09	; 9
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
 958:	99 87       	std	Y+9, r25	; 0x09
 95a:	88 87       	std	Y+8, r24	; 0x08
if(NullPointer!=Copy_pBCM_Config)
 95c:	88 85       	ldd	r24, Y+8	; 0x08
 95e:	99 85       	ldd	r25, Y+9	; 0x09
 960:	89 2b       	or	r24, r25
 962:	09 f4       	brne	.+2      	; 0x966 <BCM_Init+0x22>
 964:	49 c0       	rjmp	.+146    	; 0x9f8 <BCM_Init+0xb4>
{
	/**Register  BCM_ID to be able to seen by other functions***/
	sgu8_BCM_ID=Copy_pBCM_Config->BCM_ID;
 966:	88 85       	ldd	r24, Y+8	; 0x08
 968:	99 85       	ldd	r25, Y+9	; 0x09
 96a:	fc 01       	movw	r30, r24
 96c:	80 81       	ld	r24, Z
 96e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	/****Register size of maximum numbers of bytes could be sent for the other functions****/
	sgu32_BCM_Max_size_buffer=Copy_pBCM_Config->BCM_MAX_SIZE_OF_CHAR;
 972:	88 85       	ldd	r24, Y+8	; 0x08
 974:	99 85       	ldd	r25, Y+9	; 0x09
 976:	fc 01       	movw	r30, r24
 978:	81 81       	ldd	r24, Z+1	; 0x01
 97a:	92 81       	ldd	r25, Z+2	; 0x02
 97c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <sgu32_BCM_Max_size_buffer+0x1>
 980:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <sgu32_BCM_Max_size_buffer>
	/***Register in variable sgu8_BCM_Type_of_communication the type of comm. for the other functions ***/
	sgu8_BCM_Type_of_communication=Copy_pBCM_Config->BCM_Type_of_Communication;
 984:	88 85       	ldd	r24, Y+8	; 0x08
 986:	99 85       	ldd	r25, Y+9	; 0x09
 988:	fc 01       	movw	r30, r24
 98a:	83 81       	ldd	r24, Z+3	; 0x03
 98c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <sgu8_BCM_Type_of_communication>
	/***Register whether mode transmistion or reception***/
	sgu8_BCM_Transmition_State=Copy_pBCM_Config->BCM_Transimition_State;
 990:	88 85       	ldd	r24, Y+8	; 0x08
 992:	99 85       	ldd	r25, Y+9	; 0x09
 994:	fc 01       	movw	r30, r24
 996:	84 81       	ldd	r24, Z+4	; 0x04
 998:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sgu8_BCM_Transmition_State>
	sgu8_BCM_Reception_State=Copy_pBCM_Config->BCM_Reception_State;
 99c:	88 85       	ldd	r24, Y+8	; 0x08
 99e:	99 85       	ldd	r25, Y+9	; 0x09
 9a0:	fc 01       	movw	r30, r24
 9a2:	85 81       	ldd	r24, Z+5	; 0x05
 9a4:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <sgu8_BCM_Reception_State>
	/******************************************
	 * Check the type of communication and    * 
	 * whether it is transmision or reception * 
	 * or both of them and start initializtion*
	 ******************************************/
	 if(sgu8_BCM_Type_of_communication==UART)
 9a8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <sgu8_BCM_Type_of_communication>
 9ac:	88 23       	and	r24, r24
 9ae:	a1 f4       	brne	.+40     	; 0x9d8 <BCM_Init+0x94>
	 {
	/*
		 DIO_INIT_Pin(15,1);
		 DIO_Write_Pin(15,1);
	*/
		 UART_Confg_Stuct_t BCM_UART_Config={sgu8_BCM_Transmition_State,
 9b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sgu8_BCM_Transmition_State>
 9b4:	89 83       	std	Y+1, r24	; 0x01
 9b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sgu8_BCM_Reception_State>
 9ba:	8a 83       	std	Y+2, r24	; 0x02
 9bc:	83 e3       	ldi	r24, 0x33	; 51
 9be:	8b 83       	std	Y+3, r24	; 0x03
 9c0:	1c 82       	std	Y+4, r1	; 0x04
 9c2:	83 e0       	ldi	r24, 0x03	; 3
 9c4:	8d 83       	std	Y+5, r24	; 0x05
 9c6:	88 e0       	ldi	r24, 0x08	; 8
 9c8:	8e 83       	std	Y+6, r24	; 0x06
 9ca:	8a e0       	ldi	r24, 0x0A	; 10
 9cc:	8f 83       	std	Y+7, r24	; 0x07
											  _bps_9600_, 
											  UART_Parity_Disabled, 
											  UART_One_Stop_bit, 
											  UART_Frame_8_bit_,
											  UART_Interrupt_mode_enable};
		 UART_Init(&BCM_UART_Config);
 9ce:	ce 01       	movw	r24, r28
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <UART_Init>
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <BCM_Init+0xa8>
	 }
	 else if(sgu8_BCM_Type_of_communication==SPI)
 9d8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <sgu8_BCM_Type_of_communication>
 9dc:	81 30       	cpi	r24, 0x01	; 1
 9de:	31 f0       	breq	.+12     	; 0x9ec <BCM_Init+0xa8>
	 {
	 }
	 else if(sgu8_BCM_Type_of_communication==I2C)
 9e0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <sgu8_BCM_Type_of_communication>
 9e4:	82 30       	cpi	r24, 0x02	; 2
 9e6:	11 f0       	breq	.+4      	; 0x9ec <BCM_Init+0xa8>
	 {
	 }
	 else if(sgu8_BCM_Type_of_communication==CAN)
 9e8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <sgu8_BCM_Type_of_communication>
	 else
	 {
	 }
	 /**If transmision state is reception setcallback for the called back
     	 function that we will form**/
	 UART_SetCallBack(UART_HAS_NO_TX_ISR,BCM_UART_REC_ISR);
 9ec:	69 e7       	ldi	r22, 0x79	; 121
 9ee:	74 e0       	ldi	r23, 0x04	; 4
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 33 03 	call	0x666	; 0x666 <UART_SetCallBack>
	  
}
else
{
}
}
 9f8:	00 00       	nop
 9fa:	29 96       	adiw	r28, 0x09	; 9
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	de bf       	out	0x3e, r29	; 62
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	cd bf       	out	0x3d, r28	; 61
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <BCM_Setup_Receive>:
	{
	}

}
BCM_ERROR_t BCM_Setup_Receive(uint8_t* Copy_pu8_BCM_RX_Buffer,uint8_t Copy_pu32_BCM_RX_Buffer)
{
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	00 d0       	rcall	.+0      	; 0xa12 <BCM_Setup_Receive+0x6>
 a12:	0f 92       	push	r0
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
 a18:	9a 83       	std	Y+2, r25	; 0x02
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	6b 83       	std	Y+3, r22	; 0x03
/*Check the size of buffer is in the range of   initalized 
  configuration or not by comparing size of buffer to the 
  maximum size of buffer(sgu8_Max_size_buffer)*/
  sgu8p_BCM_RX_BUFFER=Copy_pu8_BCM_RX_Buffer;
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
 a20:	9a 81       	ldd	r25, Y+2	; 0x02
 a22:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <sgu8p_BCM_RX_BUFFER+0x1>
 a26:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sgu8p_BCM_RX_BUFFER>
  sgu32_BCM_RX_BUFFER_SIZE=Copy_pu32_BCM_RX_Buffer;
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	88 2f       	mov	r24, r24
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <sgu32_BCM_RX_BUFFER_SIZE+0x1>
 a34:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <sgu32_BCM_RX_BUFFER_SIZE>
		
}
 a38:	00 00       	nop
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	08 95       	ret

00000a46 <_exit>:
 a46:	f8 94       	cli

00000a48 <__stop_program>:
 a48:	ff cf       	rjmp	.-2      	; 0xa48 <__stop_program>
