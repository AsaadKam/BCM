
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011a  00800068  00800068  00000d58  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000130d  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a02  00000000  00000000  0000226d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b89  00000000  00000000  00002c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  000047f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2a  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 00 	call	0xea	; 0xea <main>
  8a:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UNLOCK_BUFFER>:
static uint8_t u8_BCM_array_1[BCM_ARR_SIZE]={0};
static uint8_t u8_BCM_array_2[BCM_ARR_SIZE]="tie1";

/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/
static void UNLOCK_BUFFER(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	0f 92       	push	r0
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_array_equal_flag=1U;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	89 83       	std	Y+1, r24	; 0x01

	if(u8_array_equal_flag==1U)
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	89 f4       	brne	.+34     	; 0xc8 <UNLOCK_BUFFER+0x36>
    {
		DIO_INIT_Pin(12,1);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
		DIO_Write_Pin(12,1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	8c e0       	ldi	r24, 0x0C	; 12
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
		BCM_RxUnlock(u8_BCM_array_1);
  be:	88 e6       	ldi	r24, 0x68	; 104
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 1b 06 	call	0xc36	; 0xc36 <BCM_RxUnlock>
	{
		DIO_INIT_Pin(12,1);
		DIO_Write_Pin(12,0);
	}
	
}
  c6:	0c c0       	rjmp	.+24     	; 0xe0 <UNLOCK_BUFFER+0x4e>
		DIO_INIT_Pin(12,1);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
		DIO_Write_Pin(12,0);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
}
  e0:	00 00       	nop
  e2:	0f 90       	pop	r0
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <main>:

/*- APIs IMPLEMENTATION -----------------------------------*/
int main()
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62

    /*Initalize the BCM*/
    BCM_Init(&BCM_UART_RX_Trans_Config);
  f2:	82 e6       	ldi	r24, 0x62	; 98
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <BCM_Init>
	
    BCM_Setup_Receive(u8_BCM_array_1,BCM_ARR_SIZE);
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	88 e6       	ldi	r24, 0x68	; 104
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 6b 05 	call	0xad6	; 0xad6 <BCM_Setup_Receive>
	
	while(1)
	{	
       
       BCM_RxDispatcher(UNLOCK_BUFFER);
 104:	89 e4       	ldi	r24, 0x49	; 73
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <BCM_RxDispatcher>
 10c:	fb cf       	rjmp	.-10     	; 0x104 <main+0x1a>

0000010e <DIO_INIT_Pin>:
		break;
}
return ERROR_OK;
}
uint8_t DIO_INIT_Pin(uint8_t pin, uint8_t direction)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <DIO_INIT_Pin+0x6>
 114:	0f 92       	push	r0
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t por;

	if(pin>=PinsNeeded || pin>=No_of_pins ) return 0;
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	80 32       	cpi	r24, 0x20	; 32
 122:	18 f4       	brcc	.+6      	; 0x12a <DIO_INIT_Pin+0x1c>
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	80 32       	cpi	r24, 0x20	; 32
 128:	10 f0       	brcs	.+4      	; 0x12e <DIO_INIT_Pin+0x20>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	e5 c0       	rjmp	.+458    	; 0x2f8 <DIO_INIT_Pin+0x1ea>
    else
	{
	por='A'+pin/PortSize;
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	86 95       	lsr	r24
 132:	86 95       	lsr	r24
 134:	86 95       	lsr	r24
 136:	8f 5b       	subi	r24, 0xBF	; 191
 138:	89 83       	std	Y+1, r24	; 0x01
	pin=pin%PortSize;
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	87 70       	andi	r24, 0x07	; 7
 13e:	8a 83       	std	Y+2, r24	; 0x02
	}
	
    switch(por)
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	84 34       	cpi	r24, 0x44	; 68
 148:	91 05       	cpc	r25, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_INIT_Pin+0x40>
 14c:	a3 c0       	rjmp	.+326    	; 0x294 <DIO_INIT_Pin+0x186>
 14e:	85 34       	cpi	r24, 0x45	; 69
 150:	91 05       	cpc	r25, r1
 152:	0c f0       	brlt	.+2      	; 0x156 <DIO_INIT_Pin+0x48>
 154:	ce c0       	rjmp	.+412    	; 0x2f2 <DIO_INIT_Pin+0x1e4>
 156:	83 34       	cpi	r24, 0x43	; 67
 158:	91 05       	cpc	r25, r1
 15a:	09 f4       	brne	.+2      	; 0x15e <DIO_INIT_Pin+0x50>
 15c:	6b c0       	rjmp	.+214    	; 0x234 <DIO_INIT_Pin+0x126>
 15e:	84 34       	cpi	r24, 0x44	; 68
 160:	91 05       	cpc	r25, r1
 162:	0c f0       	brlt	.+2      	; 0x166 <DIO_INIT_Pin+0x58>
 164:	c6 c0       	rjmp	.+396    	; 0x2f2 <DIO_INIT_Pin+0x1e4>
 166:	81 34       	cpi	r24, 0x41	; 65
 168:	91 05       	cpc	r25, r1
 16a:	21 f0       	breq	.+8      	; 0x174 <DIO_INIT_Pin+0x66>
 16c:	82 34       	cpi	r24, 0x42	; 66
 16e:	91 05       	cpc	r25, r1
 170:	89 f1       	breq	.+98     	; 0x1d4 <DIO_INIT_Pin+0xc6>
 172:	bf c0       	rjmp	.+382    	; 0x2f2 <DIO_INIT_Pin+0x1e4>
    {
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	88 23       	and	r24, r24
 178:	b9 f4       	brne	.+46     	; 0x1a8 <DIO_INIT_Pin+0x9a>
 17a:	8a e3       	ldi	r24, 0x3A	; 58
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	48 2f       	mov	r20, r24
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_INIT_Pin+0x86>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	2a 95       	dec	r18
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_INIT_Pin+0x82>
 198:	80 95       	com	r24
 19a:	24 2f       	mov	r18, r20
 19c:	28 23       	and	r18, r24
 19e:	8a e3       	ldi	r24, 0x3A	; 58
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
              break;
 1a6:	a7 c0       	rjmp	.+334    	; 0x2f6 <DIO_INIT_Pin+0x1e8>
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 1a8:	8a e3       	ldi	r24, 0x3A	; 58
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_INIT_Pin+0xb4>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	2a 95       	dec	r18
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_INIT_Pin+0xb0>
 1c6:	24 2f       	mov	r18, r20
 1c8:	28 2b       	or	r18, r24
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
              break;
 1d2:	91 c0       	rjmp	.+290    	; 0x2f6 <DIO_INIT_Pin+0x1e8>

    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	88 23       	and	r24, r24
 1d8:	b9 f4       	brne	.+46     	; 0x208 <DIO_INIT_Pin+0xfa>
 1da:	87 e3       	ldi	r24, 0x37	; 55
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	48 2f       	mov	r20, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_INIT_Pin+0xe6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	2a 95       	dec	r18
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_INIT_Pin+0xe2>
 1f8:	80 95       	com	r24
 1fa:	24 2f       	mov	r18, r20
 1fc:	28 23       	and	r18, r24
 1fe:	87 e3       	ldi	r24, 0x37	; 55
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
              break;
 206:	77 c0       	rjmp	.+238    	; 0x2f6 <DIO_INIT_Pin+0x1e8>
    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 208:	87 e3       	ldi	r24, 0x37	; 55
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_INIT_Pin+0x114>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_INIT_Pin+0x110>
 226:	24 2f       	mov	r18, r20
 228:	28 2b       	or	r18, r24
 22a:	87 e3       	ldi	r24, 0x37	; 55
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
              break;
 232:	61 c0       	rjmp	.+194    	; 0x2f6 <DIO_INIT_Pin+0x1e8>

    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	88 23       	and	r24, r24
 238:	b9 f4       	brne	.+46     	; 0x268 <DIO_INIT_Pin+0x15a>
 23a:	84 e3       	ldi	r24, 0x34	; 52
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_INIT_Pin+0x146>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	2a 95       	dec	r18
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_INIT_Pin+0x142>
 258:	80 95       	com	r24
 25a:	24 2f       	mov	r18, r20
 25c:	28 23       	and	r18, r24
 25e:	84 e3       	ldi	r24, 0x34	; 52
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
              break;
 266:	47 c0       	rjmp	.+142    	; 0x2f6 <DIO_INIT_Pin+0x1e8>
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 268:	84 e3       	ldi	r24, 0x34	; 52
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z
 270:	48 2f       	mov	r20, r24
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_INIT_Pin+0x174>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	2a 95       	dec	r18
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_INIT_Pin+0x170>
 286:	24 2f       	mov	r18, r20
 288:	28 2b       	or	r18, r24
 28a:	84 e3       	ldi	r24, 0x34	; 52
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
              break;
 292:	31 c0       	rjmp	.+98     	; 0x2f6 <DIO_INIT_Pin+0x1e8>

    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	88 23       	and	r24, r24
 298:	b9 f4       	brne	.+46     	; 0x2c8 <DIO_INIT_Pin+0x1ba>
 29a:	81 e3       	ldi	r24, 0x31	; 49
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_INIT_Pin+0x1a6>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_INIT_Pin+0x1a2>
 2b8:	80 95       	com	r24
 2ba:	24 2f       	mov	r18, r20
 2bc:	28 23       	and	r18, r24
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <DIO_INIT_Pin+0x1e4>
 2c8:	81 e3       	ldi	r24, 0x31	; 49
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_INIT_Pin+0x1d4>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	2a 95       	dec	r18
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_INIT_Pin+0x1d0>
 2e6:	24 2f       	mov	r18, r20
 2e8:	28 2b       	or	r18, r24
 2ea:	81 e3       	ldi	r24, 0x31	; 49
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
			  break;
	case 'G': if(direction==0){CLR_BIT(DDRG,pin);}else{SET_BIT(DDRG,pin);}
			  break;
#endif
	default :
	return ERROR_NOK;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <DIO_INIT_Pin+0x1ea>
	break;
	}
return ERROR_OK;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
}
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <DIO_Write_Pin>:
	break;
	}
return ERROR_OK;
}
uint8_t DIO_Write_Pin(uint8_t pin,uint8_t BitValue)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <DIO_Write_Pin+0x6>
 30a:	0f 92       	push	r0
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t por;
 	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	80 32       	cpi	r24, 0x20	; 32
 318:	18 f4       	brcc	.+6      	; 0x320 <DIO_Write_Pin+0x1c>
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	80 32       	cpi	r24, 0x20	; 32
 31e:	10 f0       	brcs	.+4      	; 0x324 <DIO_Write_Pin+0x20>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	e6 c0       	rjmp	.+460    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 	else
 	{
	 	por='A'+pin/PortSize;
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	86 95       	lsr	r24
 328:	86 95       	lsr	r24
 32a:	86 95       	lsr	r24
 32c:	8f 5b       	subi	r24, 0xBF	; 191
 32e:	89 83       	std	Y+1, r24	; 0x01
	 	pin=pin%PortSize;
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	87 70       	andi	r24, 0x07	; 7
 334:	8a 83       	std	Y+2, r24	; 0x02
 	}
	 
    switch(por)
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	88 2f       	mov	r24, r24
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	84 34       	cpi	r24, 0x44	; 68
 33e:	91 05       	cpc	r25, r1
 340:	09 f4       	brne	.+2      	; 0x344 <DIO_Write_Pin+0x40>
 342:	a3 c0       	rjmp	.+326    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 344:	85 34       	cpi	r24, 0x45	; 69
 346:	91 05       	cpc	r25, r1
 348:	0c f0       	brlt	.+2      	; 0x34c <DIO_Write_Pin+0x48>
 34a:	cf c0       	rjmp	.+414    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 34c:	83 34       	cpi	r24, 0x43	; 67
 34e:	91 05       	cpc	r25, r1
 350:	09 f4       	brne	.+2      	; 0x354 <DIO_Write_Pin+0x50>
 352:	6b c0       	rjmp	.+214    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 354:	84 34       	cpi	r24, 0x44	; 68
 356:	91 05       	cpc	r25, r1
 358:	0c f0       	brlt	.+2      	; 0x35c <DIO_Write_Pin+0x58>
 35a:	c7 c0       	rjmp	.+398    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 35c:	81 34       	cpi	r24, 0x41	; 65
 35e:	91 05       	cpc	r25, r1
 360:	21 f0       	breq	.+8      	; 0x36a <DIO_Write_Pin+0x66>
 362:	82 34       	cpi	r24, 0x42	; 66
 364:	91 05       	cpc	r25, r1
 366:	89 f1       	breq	.+98     	; 0x3ca <DIO_Write_Pin+0xc6>
 368:	c0 c0       	rjmp	.+384    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
    {
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	88 23       	and	r24, r24
 36e:	b9 f4       	brne	.+46     	; 0x39e <DIO_Write_Pin+0x9a>
 370:	8b e3       	ldi	r24, 0x3B	; 59
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_Write_Pin+0x86>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	2a 95       	dec	r18
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_Write_Pin+0x82>
 38e:	80 95       	com	r24
 390:	24 2f       	mov	r18, r20
 392:	28 23       	and	r18, r24
 394:	8b e3       	ldi	r24, 0x3B	; 59
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
              break;
 39c:	a8 c0       	rjmp	.+336    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
 39e:	8b e3       	ldi	r24, 0x3B	; 59
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_Write_Pin+0xb4>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	2a 95       	dec	r18
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_Write_Pin+0xb0>
 3bc:	24 2f       	mov	r18, r20
 3be:	28 2b       	or	r18, r24
 3c0:	8b e3       	ldi	r24, 0x3B	; 59
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
              break;
 3c8:	92 c0       	rjmp	.+292    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>

    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	88 23       	and	r24, r24
 3ce:	b9 f4       	brne	.+46     	; 0x3fe <DIO_Write_Pin+0xfa>
 3d0:	88 e3       	ldi	r24, 0x38	; 56
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_Write_Pin+0xe6>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	2a 95       	dec	r18
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_Write_Pin+0xe2>
 3ee:	80 95       	com	r24
 3f0:	24 2f       	mov	r18, r20
 3f2:	28 23       	and	r18, r24
 3f4:	88 e3       	ldi	r24, 0x38	; 56
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
              break;
 3fc:	78 c0       	rjmp	.+240    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	fc 01       	movw	r30, r24
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	2a 95       	dec	r18
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	24 2f       	mov	r18, r20
 41e:	28 2b       	or	r18, r24
 420:	88 e3       	ldi	r24, 0x38	; 56
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
              break;
 428:	62 c0       	rjmp	.+196    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>

    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	88 23       	and	r24, r24
 42e:	b9 f4       	brne	.+46     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 430:	85 e3       	ldi	r24, 0x35	; 53
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fc 01       	movw	r30, r24
 436:	80 81       	ld	r24, Z
 438:	48 2f       	mov	r20, r24
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	28 2f       	mov	r18, r24
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	2a 95       	dec	r18
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	80 95       	com	r24
 450:	24 2f       	mov	r18, r20
 452:	28 23       	and	r18, r24
 454:	85 e3       	ldi	r24, 0x35	; 53
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
              break;
 45c:	48 c0       	rjmp	.+144    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
 45e:	85 e3       	ldi	r24, 0x35	; 53
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	fc 01       	movw	r30, r24
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 47c:	24 2f       	mov	r18, r20
 47e:	28 2b       	or	r18, r24
 480:	85 e3       	ldi	r24, 0x35	; 53
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
              break;
 488:	32 c0       	rjmp	.+100    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>

    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	88 23       	and	r24, r24
 48e:	b9 f4       	brne	.+46     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 490:	82 e3       	ldi	r24, 0x32	; 50
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	48 2f       	mov	r20, r24
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ae:	80 95       	com	r24
 4b0:	24 2f       	mov	r18, r20
 4b2:	28 23       	and	r18, r24
 4b4:	82 e3       	ldi	r24, 0x32	; 50
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
              break;
 4bc:	18 c0       	rjmp	.+48     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
 4be:	82 e3       	ldi	r24, 0x32	; 50
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	fc 01       	movw	r30, r24
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	2a 95       	dec	r18
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4dc:	24 2f       	mov	r18, r20
 4de:	28 2b       	or	r18, r24
 4e0:	82 e3       	ldi	r24, 0x32	; 50
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
              break;
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
	case 'G': if(BitValue==0){CLR_BIT(PORTG,pin);}else{SET_BIT(PORTG,pin);}
			  break;	
			  
	#endif
	default :
	return ERROR_NOK;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	break;
	}
	return ERROR_OK;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
}
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <__vector_13>:
#endif

/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

void __vector_13(void)
{
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	2f 93       	push	r18
 508:	3f 93       	push	r19
 50a:	4f 93       	push	r20
 50c:	5f 93       	push	r21
 50e:	6f 93       	push	r22
 510:	7f 93       	push	r23
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	af 93       	push	r26
 518:	bf 93       	push	r27
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62

	gu8_Uart_rec_char_counter++;
    sgu8_UART_REC_BYTE=UART_DATA_REGISTER;
	#elif UART_ISR_WITH_FLAG==CALLBACK

	if(gPntrToFunc_UART_RX_ISR==NullPointer)
 526:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gPntrToFunc_UART_RX_ISR>
 52a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gPntrToFunc_UART_RX_ISR+0x1>
 52e:	89 2b       	or	r24, r25
 530:	31 f0       	breq	.+12     	; 0x53e <__vector_13+0x42>
	{ 		

	}
    else
	{  
		gPntrToFunc_UART_RX_ISR();
 532:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gPntrToFunc_UART_RX_ISR>
 536:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gPntrToFunc_UART_RX_ISR+0x1>
 53a:	fc 01       	movw	r30, r24
 53c:	09 95       	icall
	}
	#endif
	
    /*DIO_toggle_Pin(0);*/
}
 53e:	00 00       	nop
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__vector_15>:

void __vector_15(void)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62

	gu8_Uart_send_char_counter++;

	#elif (UART_ISR_WITH_FLAG==CALLBACK)
		
	if(gPntrToFunc_UART_TX_ISR==NullPointer){} 
 590:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gPntrToFunc_UART_TX_ISR>
 594:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <gPntrToFunc_UART_TX_ISR+0x1>
 598:	89 2b       	or	r24, r25
 59a:	31 f0       	breq	.+12     	; 0x5a8 <__vector_15+0x42>
    else
	{
		gPntrToFunc_UART_TX_ISR();
 59c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gPntrToFunc_UART_TX_ISR>
 5a0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <gPntrToFunc_UART_TX_ISR+0x1>
 5a4:	fc 01       	movw	r30, r24
 5a6:	09 95       	icall
	}

	#endif

	/*DIO_toggle_Pin(1);*/
}
 5a8:	00 00       	nop
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	ff 91       	pop	r31
 5b0:	ef 91       	pop	r30
 5b2:	bf 91       	pop	r27
 5b4:	af 91       	pop	r26
 5b6:	9f 91       	pop	r25
 5b8:	8f 91       	pop	r24
 5ba:	7f 91       	pop	r23
 5bc:	6f 91       	pop	r22
 5be:	5f 91       	pop	r21
 5c0:	4f 91       	pop	r20
 5c2:	3f 91       	pop	r19
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <UART_SetCallBack>:

/*- APIs IMPLEMENTATION -----------------------------------*/
UART_Error_t UART_SetCallBack(PntrToFunc_t PntrToFunc_Copy_UART_TX_USER_ISR, PntrToFunc_t PntrToFunc_Copy_UART_RX_USER_ISR)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	00 d0       	rcall	.+0      	; 0x5d6 <UART_SetCallBack+0x6>
 5d6:	00 d0       	rcall	.+0      	; 0x5d8 <UART_SetCallBack+0x8>
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	9a 83       	std	Y+2, r25	; 0x02
 5de:	89 83       	std	Y+1, r24	; 0x01
 5e0:	7c 83       	std	Y+4, r23	; 0x04
 5e2:	6b 83       	std	Y+3, r22	; 0x03

  if(sgu8_UART_Execution_Mode==UART_Interrupt_mode_enable)
 5e4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sgu8_UART_Execution_Mode>
 5e8:	8a 30       	cpi	r24, 0x0A	; 10
 5ea:	a1 f4       	brne	.+40     	; 0x614 <UART_SetCallBack+0x44>
  {

	if(NullPointer!=PntrToFunc_Copy_UART_TX_USER_ISR)
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	9a 81       	ldd	r25, Y+2	; 0x02
 5f0:	89 2b       	or	r24, r25
 5f2:	31 f0       	breq	.+12     	; 0x600 <UART_SetCallBack+0x30>
	{
		gPntrToFunc_UART_TX_ISR=PntrToFunc_Copy_UART_TX_USER_ISR;
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <gPntrToFunc_UART_TX_ISR+0x1>
 5fc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gPntrToFunc_UART_TX_ISR>
		
	}
	else
	{
	}
	if(NullPointer!=PntrToFunc_Copy_UART_RX_USER_ISR)
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	9c 81       	ldd	r25, Y+4	; 0x04
 604:	89 2b       	or	r24, r25
 606:	31 f0       	breq	.+12     	; 0x614 <UART_SetCallBack+0x44>
	{
	   gPntrToFunc_UART_RX_ISR=PntrToFunc_Copy_UART_RX_USER_ISR;     
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	9c 81       	ldd	r25, Y+4	; 0x04
 60c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <gPntrToFunc_UART_RX_ISR+0x1>
 610:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <gPntrToFunc_UART_RX_ISR>
  }
  else
  {
  }

}
 614:	00 00       	nop
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <UART_Init>:
 * Input     : (char_t* pchar_index)It takes pointer to char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

UART_Error_t UART_Init(const UART_Confg_Stuct_t* pstr_Config_UART)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	00 d0       	rcall	.+0      	; 0x62a <UART_Init+0x6>
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	9a 83       	std	Y+2, r25	; 0x02
 630:	89 83       	std	Y+1, r24	; 0x01

    if(pstr_Config_UART!=NullPointer)
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	9a 81       	ldd	r25, Y+2	; 0x02
 636:	89 2b       	or	r24, r25
 638:	09 f4       	brne	.+2      	; 0x63c <UART_Init+0x18>
 63a:	09 c1       	rjmp	.+530    	; 0x84e <UART_Init+0x22a>
	{
		/**Set baud rate**/
		UART_BAUD_RATE_REG_HIGH = (uint8_t)((pstr_Config_UART->BaudRate)>>8);
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	9a 81       	ldd	r25, Y+2	; 0x02
 640:	fc 01       	movw	r30, r24
 642:	82 81       	ldd	r24, Z+2	; 0x02
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	29 2f       	mov	r18, r25
 64a:	33 27       	eor	r19, r19
 64c:	27 fd       	sbrc	r18, 7
 64e:	3a 95       	dec	r19
 650:	80 e4       	ldi	r24, 0x40	; 64
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	fc 01       	movw	r30, r24
 656:	20 83       	st	Z, r18
		UART_BAUD_RATE_REG_LOW =  (uint8_t) (pstr_Config_UART->BaudRate);
 658:	89 e2       	ldi	r24, 0x29	; 41
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	29 81       	ldd	r18, Y+1	; 0x01
 65e:	3a 81       	ldd	r19, Y+2	; 0x02
 660:	f9 01       	movw	r30, r18
 662:	22 81       	ldd	r18, Z+2	; 0x02
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
		/**Enable receiver and transmitter**/

		if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	9a 81       	ldd	r25, Y+2	; 0x02
 66c:	fc 01       	movw	r30, r24
 66e:	80 81       	ld	r24, Z
 670:	8d 30       	cpi	r24, 0x0D	; 13
 672:	49 f4       	brne	.+18     	; 0x686 <UART_Init+0x62>
		{
			
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_transimter_EN_BIT);
 674:	8a e2       	ldi	r24, 0x2A	; 42
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	fc 01       	movw	r30, r24
 67a:	20 81       	ld	r18, Z
 67c:	8a e2       	ldi	r24, 0x2A	; 42
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	28 60       	ori	r18, 0x08	; 8
 682:	fc 01       	movw	r30, r24
 684:	20 83       	st	Z, r18
			
		}
		else
		{
		}
		if(pstr_Config_UART->Reciever==UART_Receive_Enable)
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	9a 81       	ldd	r25, Y+2	; 0x02
 68a:	fc 01       	movw	r30, r24
 68c:	81 81       	ldd	r24, Z+1	; 0x01
 68e:	8e 30       	cpi	r24, 0x0E	; 14
 690:	49 f4       	brne	.+18     	; 0x6a4 <UART_Init+0x80>
		{
			
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_Reciever_EN_BIT);
 692:	8a e2       	ldi	r24, 0x2A	; 42
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	fc 01       	movw	r30, r24
 698:	20 81       	ld	r18, Z
 69a:	8a e2       	ldi	r24, 0x2A	; 42
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	20 61       	ori	r18, 0x10	; 16
 6a0:	fc 01       	movw	r30, r24
 6a2:	20 83       	st	Z, r18
		}	
		else
		{
		}		
		/*** Check for parity ***/
		if(pstr_Config_UART->Parity==UART_Parity_Disabled)
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	fc 01       	movw	r30, r24
 6aa:	83 81       	ldd	r24, Z+3	; 0x03
 6ac:	88 23       	and	r24, r24
 6ae:	49 f4       	brne	.+18     	; 0x6c2 <UART_Init+0x9e>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);
 6b0:	20 e4       	ldi	r18, 0x40	; 64
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	80 e4       	ldi	r24, 0x40	; 64
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	f9 01       	movw	r30, r18
 6ba:	20 81       	ld	r18, Z
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
 6c0:	1f c0       	rjmp	.+62     	; 0x700 <UART_Init+0xdc>
		}
		else if(pstr_Config_UART->Parity==UART_Parity_Even)
 6c2:	89 81       	ldd	r24, Y+1	; 0x01
 6c4:	9a 81       	ldd	r25, Y+2	; 0x02
 6c6:	fc 01       	movw	r30, r24
 6c8:	83 81       	ldd	r24, Z+3	; 0x03
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	51 f4       	brne	.+20     	; 0x6e2 <UART_Init+0xbe>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);			
 6ce:	80 e4       	ldi	r24, 0x40	; 64
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 81       	ld	r18, Z
 6d6:	80 e4       	ldi	r24, 0x40	; 64
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	20 62       	ori	r18, 0x20	; 32
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
 6e0:	0f c0       	rjmp	.+30     	; 0x700 <UART_Init+0xdc>
		}
		else if(pstr_Config_UART->Parity==UART_Parity_Odd)
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	fc 01       	movw	r30, r24
 6e8:	83 81       	ldd	r24, Z+3	; 0x03
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	49 f4       	brne	.+18     	; 0x700 <UART_Init+0xdc>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(1<<UART_Parity_Bit_0);				
 6ee:	80 e4       	ldi	r24, 0x40	; 64
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 81       	ld	r18, Z
 6f6:	80 e4       	ldi	r24, 0x40	; 64
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	20 63       	ori	r18, 0x30	; 48
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
		}
		else
		{
		}
		/*** Set frame format: Stop bit***/
		if(pstr_Config_UART->Parity==UART_two_Stop_bit)
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	9a 81       	ldd	r25, Y+2	; 0x02
 704:	fc 01       	movw	r30, r24
 706:	83 81       	ldd	r24, Z+3	; 0x03
 708:	84 30       	cpi	r24, 0x04	; 4
 70a:	51 f4       	brne	.+20     	; 0x720 <UART_Init+0xfc>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_STOP_setting_Bit);				
 70c:	80 e4       	ldi	r24, 0x40	; 64
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	fc 01       	movw	r30, r24
 712:	20 81       	ld	r18, Z
 714:	80 e4       	ldi	r24, 0x40	; 64
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	28 60       	ori	r18, 0x08	; 8
 71a:	fc 01       	movw	r30, r24
 71c:	20 83       	st	Z, r18
 71e:	0e c0       	rjmp	.+28     	; 0x73c <UART_Init+0x118>
		}
		else if(pstr_Config_UART->Parity==UART_One_Stop_bit)
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	9a 81       	ldd	r25, Y+2	; 0x02
 724:	fc 01       	movw	r30, r24
 726:	83 81       	ldd	r24, Z+3	; 0x03
 728:	83 30       	cpi	r24, 0x03	; 3
 72a:	41 f4       	brne	.+16     	; 0x73c <UART_Init+0x118>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_STOP_setting_Bit);
 72c:	20 e4       	ldi	r18, 0x40	; 64
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	80 e4       	ldi	r24, 0x40	; 64
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	f9 01       	movw	r30, r18
 736:	20 81       	ld	r18, Z
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18
		}
		else
		{
		}
		/* Set frame format:Data_size */
		if(pstr_Config_UART->Data_size==UART_Frame_5_bit_)
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	9a 81       	ldd	r25, Y+2	; 0x02
 740:	fc 01       	movw	r30, r24
 742:	85 81       	ldd	r24, Z+5	; 0x05
 744:	85 30       	cpi	r24, 0x05	; 5
 746:	49 f4       	brne	.+18     	; 0x75a <UART_Init+0x136>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
 748:	20 e4       	ldi	r18, 0x40	; 64
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	80 e4       	ldi	r24, 0x40	; 64
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	20 81       	ld	r18, Z
 754:	fc 01       	movw	r30, r24
 756:	20 83       	st	Z, r18
 758:	3f c0       	rjmp	.+126    	; 0x7d8 <UART_Init+0x1b4>
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_6_bit_)
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	9a 81       	ldd	r25, Y+2	; 0x02
 75e:	fc 01       	movw	r30, r24
 760:	85 81       	ldd	r24, Z+5	; 0x05
 762:	86 30       	cpi	r24, 0x06	; 6
 764:	51 f4       	brne	.+20     	; 0x77a <UART_Init+0x156>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);
 766:	80 e4       	ldi	r24, 0x40	; 64
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	fc 01       	movw	r30, r24
 76c:	20 81       	ld	r18, Z
 76e:	80 e4       	ldi	r24, 0x40	; 64
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	22 60       	ori	r18, 0x02	; 2
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
 778:	2f c0       	rjmp	.+94     	; 0x7d8 <UART_Init+0x1b4>
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_7_bit_)
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	9a 81       	ldd	r25, Y+2	; 0x02
 77e:	fc 01       	movw	r30, r24
 780:	85 81       	ldd	r24, Z+5	; 0x05
 782:	87 30       	cpi	r24, 0x07	; 7
 784:	51 f4       	brne	.+20     	; 0x79a <UART_Init+0x176>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
 786:	80 e4       	ldi	r24, 0x40	; 64
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	fc 01       	movw	r30, r24
 78c:	20 81       	ld	r18, Z
 78e:	80 e4       	ldi	r24, 0x40	; 64
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	24 60       	ori	r18, 0x04	; 4
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
 798:	1f c0       	rjmp	.+62     	; 0x7d8 <UART_Init+0x1b4>
		}			
		else if(pstr_Config_UART->Data_size==UART_Frame_8_bit_)
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	9a 81       	ldd	r25, Y+2	; 0x02
 79e:	fc 01       	movw	r30, r24
 7a0:	85 81       	ldd	r24, Z+5	; 0x05
 7a2:	88 30       	cpi	r24, 0x08	; 8
 7a4:	51 f4       	brne	.+20     	; 0x7ba <UART_Init+0x196>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);			
 7a6:	80 e4       	ldi	r24, 0x40	; 64
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	fc 01       	movw	r30, r24
 7ac:	20 81       	ld	r18, Z
 7ae:	80 e4       	ldi	r24, 0x40	; 64
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	26 60       	ori	r18, 0x06	; 6
 7b4:	fc 01       	movw	r30, r24
 7b6:	20 83       	st	Z, r18
 7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <UART_Init+0x1b4>
		}	
		else if(pstr_Config_UART->Data_size==UART_Frame_9_bit_)
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	9a 81       	ldd	r25, Y+2	; 0x02
 7be:	fc 01       	movw	r30, r24
 7c0:	85 81       	ldd	r24, Z+5	; 0x05
 7c2:	89 30       	cpi	r24, 0x09	; 9
 7c4:	49 f4       	brne	.+18     	; 0x7d8 <UART_Init+0x1b4>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);					
 7c6:	80 e4       	ldi	r24, 0x40	; 64
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	fc 01       	movw	r30, r24
 7cc:	20 81       	ld	r18, Z
 7ce:	80 e4       	ldi	r24, 0x40	; 64
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	26 60       	ori	r18, 0x06	; 6
 7d4:	fc 01       	movw	r30, r24
 7d6:	20 83       	st	Z, r18
		}	
	    else
		{
		}
		/**Check whether it is interrupt or polling mode**/
		if(pstr_Config_UART->InterruptMode==UART_Interrupt_mode_enable)
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	9a 81       	ldd	r25, Y+2	; 0x02
 7dc:	fc 01       	movw	r30, r24
 7de:	86 81       	ldd	r24, Z+6	; 0x06
 7e0:	8a 30       	cpi	r24, 0x0A	; 10
 7e2:	89 f5       	brne	.+98     	; 0x846 <UART_Init+0x222>
		{
			
			sgu8_UART_Execution_Mode=UART_Interrupt_mode_enable;
 7e4:	8a e0       	ldi	r24, 0x0A	; 10
 7e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sgu8_UART_Execution_Mode>
			/*Enable Global Interrupt*/
			EnableGeneralInterrupt();
 7ea:	8f e5       	ldi	r24, 0x5F	; 95
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	fc 01       	movw	r30, r24
 7f0:	20 81       	ld	r18, Z
 7f2:	8f e5       	ldi	r24, 0x5F	; 95
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	20 68       	ori	r18, 0x80	; 128
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18

			/*Enable Receiver Interrupt*/
		    if(pstr_Config_UART->Reciever==UART_Receive_Enable)
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	9a 81       	ldd	r25, Y+2	; 0x02
 800:	fc 01       	movw	r30, r24
 802:	81 81       	ldd	r24, Z+1	; 0x01
 804:	8e 30       	cpi	r24, 0x0E	; 14
 806:	61 f4       	brne	.+24     	; 0x820 <UART_Init+0x1fc>
			{
				
		    	UART_RXC_Enable_INT();
 808:	8a e2       	ldi	r24, 0x2A	; 42
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	fc 01       	movw	r30, r24
 80e:	20 81       	ld	r18, Z
 810:	8a e2       	ldi	r24, 0x2A	; 42
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	20 68       	ori	r18, 0x80	; 128
 816:	fc 01       	movw	r30, r24
 818:	20 83       	st	Z, r18
				sgu8_UART_Receiver_enable=UART_Receive_Enable;
 81a:	8e e0       	ldi	r24, 0x0E	; 14
 81c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sgu8_UART_Receiver_enable>
			else
			{
			}

			/*Enable Transimter Interrupt*/
		    if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	9a 81       	ldd	r25, Y+2	; 0x02
 824:	fc 01       	movw	r30, r24
 826:	80 81       	ld	r24, Z
 828:	8d 30       	cpi	r24, 0x0D	; 13
 82a:	99 f4       	brne	.+38     	; 0x852 <UART_Init+0x22e>
			{
                
				UART_TXC_Enable_INT();
 82c:	8a e2       	ldi	r24, 0x2A	; 42
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	fc 01       	movw	r30, r24
 832:	20 81       	ld	r18, Z
 834:	8a e2       	ldi	r24, 0x2A	; 42
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	20 64       	ori	r18, 0x40	; 64
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
				sgu8_UART_Transimter_enable=UART_trasmit_Enable;
 83e:	8d e0       	ldi	r24, 0x0D	; 13
 840:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <sgu8_UART_Transimter_enable>
 844:	06 c0       	rjmp	.+12     	; 0x852 <UART_Init+0x22e>
			{
			}
		}
		else
		{
			sgu8_UART_Execution_Mode=UART_Polling_mode_enable;			
 846:	8b e0       	ldi	r24, 0x0B	; 11
 848:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sgu8_UART_Execution_Mode>
 84c:	02 c0       	rjmp	.+4      	; 0x852 <UART_Init+0x22e>
		}
	}
	else 
	{
		return UART_ERROR_NULL_POINTER;
 84e:	8c e0       	ldi	r24, 0x0C	; 12
 850:	00 c0       	rjmp	.+0      	; 0x852 <UART_Init+0x22e>
	}

}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	08 95       	ret

0000085c <UART_RecByte>:
 * Input     : (uint8_t* pchar_index)It takes pointer to char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

UART_Error_t UART_RecByte(uint8_t volatile * volatile pchar_index)
{
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	00 d0       	rcall	.+0      	; 0x862 <__stack+0x3>
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	9a 83       	std	Y+2, r25	; 0x02
 868:	89 83       	std	Y+1, r24	; 0x01
    if(sgu8_UART_Receiver_enable==UART_Receive_Enable)
 86a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sgu8_UART_Receiver_enable>
 86e:	8e 30       	cpi	r24, 0x0E	; 14
 870:	99 f4       	brne	.+38     	; 0x898 <__stack+0x39>
	{
		if(sgu8_UART_Execution_Mode==UART_Polling_mode_enable)
 872:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sgu8_UART_Execution_Mode>
 876:	8b 30       	cpi	r24, 0x0B	; 11
 878:	39 f4       	brne	.+14     	; 0x888 <__stack+0x29>
		{
			while ( !( UART_CNTRL_STATUS_REG_A & (1<<UART_Receive_Complete_FLAG)) );
 87a:	00 00       	nop
 87c:	8b e2       	ldi	r24, 0x2B	; 43
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	fc 01       	movw	r30, r24
 882:	80 81       	ld	r24, Z
 884:	88 23       	and	r24, r24
 886:	d4 f7       	brge	.-12     	; 0x87c <__stack+0x1d>

		}
		else
		{
		}
		*pchar_index=UART_DATA_REGISTER;
 888:	2c e2       	ldi	r18, 0x2C	; 44
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	9a 81       	ldd	r25, Y+2	; 0x02
 890:	f9 01       	movw	r30, r18
 892:	20 81       	ld	r18, Z
 894:	fc 01       	movw	r30, r24
 896:	20 83       	st	Z, r18
	}
	else
	{
	}

}
 898:	00 00       	nop
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	08 95       	ret

000008a4 <BCM_UART_REC_ISR>:
/*- APIs IMPLEMENTATION -----------------------------------*/

/*********Called Back function of BCM****************/
/*****BCM UART RECEIVER CALL BACK FUNCTION IN ISR*****/
void BCM_UART_REC_ISR(void)
{
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
	
/* 	DIO_INIT_Pin(5,1);
	DIO_Write_Pin(5,1); */
	
	UART_RecByte(&sgu32_BCM_RX_Buffer);
 8ac:	80 e8       	ldi	r24, 0x80	; 128
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 2e 04 	call	0x85c	; 0x85c <UART_RecByte>
	/***If my state is BCM_RX_REQ_CONFIRMED***/
	if(BCM_RX_REQ_CONFIRMED==sgu8_BCM_RX_STATUS)
 8b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgu8_BCM_RX_STATUS>
 8b8:	8d 30       	cpi	r24, 0x0D	; 13
 8ba:	81 f4       	brne	.+32     	; 0x8dc <BCM_UART_REC_ISR+0x38>
	{
		/***Check the byte that have sent is The ID Byte***/
		if(sgu8_BCM_ID==sgu32_BCM_RX_Buffer)
 8bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 8c0:	28 2f       	mov	r18, r24
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sgu32_BCM_RX_Buffer>
 8c8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <sgu32_BCM_RX_Buffer+0x1>
 8cc:	28 17       	cp	r18, r24
 8ce:	39 07       	cpc	r19, r25
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <BCM_UART_REC_ISR+0x30>
 8d2:	86 c0       	rjmp	.+268    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
		{
			sgu8_BCM_RX_STATUS=BCM_RX_ID_RECIEVED_OK;
 8d4:	84 e0       	ldi	r24, 0x04	; 4
 8d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
		}		
	}
	else
	{
	}
}
 8da:	82 c0       	rjmp	.+260    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
	else if(BCM_RX_ID_RECIEVED_OK==sgu8_BCM_RX_STATUS)
 8dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgu8_BCM_RX_STATUS>
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	81 f4       	brne	.+32     	; 0x904 <BCM_UART_REC_ISR+0x60>
		if(sgu32_BCM_RX_BUFFER_SIZE==sgu32_BCM_RX_Buffer)
 8e4:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <sgu32_BCM_RX_BUFFER_SIZE>
 8e8:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <sgu32_BCM_RX_BUFFER_SIZE+0x1>
 8ec:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sgu32_BCM_RX_Buffer>
 8f0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <sgu32_BCM_RX_Buffer+0x1>
 8f4:	28 17       	cp	r18, r24
 8f6:	39 07       	cpc	r19, r25
 8f8:	09 f0       	breq	.+2      	; 0x8fc <BCM_UART_REC_ISR+0x58>
 8fa:	72 c0       	rjmp	.+228    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
			sgu8_BCM_RX_STATUS=BCM_RX_FIST_BYTE_SIZE_RECIEVED_OK;
 8fc:	8e e0       	ldi	r24, 0x0E	; 14
 8fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
}
 902:	6e c0       	rjmp	.+220    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
	else if(BCM_RX_FIST_BYTE_SIZE_RECIEVED_OK==sgu8_BCM_RX_STATUS)
 904:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgu8_BCM_RX_STATUS>
 908:	8e 30       	cpi	r24, 0x0E	; 14
 90a:	91 f4       	brne	.+36     	; 0x930 <BCM_UART_REC_ISR+0x8c>
		if((sgu32_BCM_RX_BUFFER_SIZE>>8)== sgu32_BCM_RX_Buffer)
 90c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sgu32_BCM_RX_BUFFER_SIZE>
 910:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sgu32_BCM_RX_BUFFER_SIZE+0x1>
 914:	29 2f       	mov	r18, r25
 916:	33 27       	eor	r19, r19
 918:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sgu32_BCM_RX_Buffer>
 91c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <sgu32_BCM_RX_Buffer+0x1>
 920:	28 17       	cp	r18, r24
 922:	39 07       	cpc	r19, r25
 924:	09 f0       	breq	.+2      	; 0x928 <BCM_UART_REC_ISR+0x84>
 926:	5c c0       	rjmp	.+184    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
			sgu8_BCM_RX_STATUS=BCM_RX_SIZE_RECEIEVED_OK;
 928:	86 e0       	ldi	r24, 0x06	; 6
 92a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
}
 92e:	58 c0       	rjmp	.+176    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
	else if(BCM_RX_SIZE_RECEIEVED_OK==sgu8_BCM_RX_STATUS)
 930:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgu8_BCM_RX_STATUS>
 934:	86 30       	cpi	r24, 0x06	; 6
 936:	09 f0       	breq	.+2      	; 0x93a <BCM_UART_REC_ISR+0x96>
 938:	53 c0       	rjmp	.+166    	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
		if(sgu32_BCM_RX_BUFFER_INDEX<sgu32_BCM_RX_BUFFER_SIZE)
 93a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <sgu32_BCM_RX_BUFFER_INDEX>
 93e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <sgu32_BCM_RX_BUFFER_INDEX+0x1>
 942:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sgu32_BCM_RX_BUFFER_SIZE>
 946:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sgu32_BCM_RX_BUFFER_SIZE+0x1>
 94a:	28 17       	cp	r18, r24
 94c:	39 07       	cpc	r19, r25
 94e:	28 f5       	brcc	.+74     	; 0x99a <BCM_UART_REC_ISR+0xf6>
			sgu8p_BCM_RX_BUFFER[sgu32_BCM_RX_BUFFER_INDEX]=sgu32_BCM_RX_Buffer;
 950:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <sgu32_BCM_RX_Buffer>
 954:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <sgu32_BCM_RX_Buffer+0x1>
 958:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sgu8p_BCM_RX_BUFFER>
 95c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sgu8p_BCM_RX_BUFFER+0x1>
 960:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <sgu32_BCM_RX_BUFFER_INDEX>
 964:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <sgu32_BCM_RX_BUFFER_INDEX+0x1>
 968:	82 0f       	add	r24, r18
 96a:	93 1f       	adc	r25, r19
 96c:	24 2f       	mov	r18, r20
 96e:	fc 01       	movw	r30, r24
 970:	20 83       	st	Z, r18
			sgu8_BCM_CheckSum+=sgu32_BCM_RX_Buffer;
 972:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sgu32_BCM_RX_Buffer>
 976:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <sgu32_BCM_RX_Buffer+0x1>
 97a:	98 2f       	mov	r25, r24
 97c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <sgu8_BCM_CheckSum>
 980:	89 0f       	add	r24, r25
 982:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <sgu8_BCM_CheckSum>
			sgu32_BCM_RX_BUFFER_INDEX++;
 986:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <sgu32_BCM_RX_BUFFER_INDEX>
 98a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <sgu32_BCM_RX_BUFFER_INDEX+0x1>
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <sgu32_BCM_RX_BUFFER_INDEX+0x1>
 994:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <sgu32_BCM_RX_BUFFER_INDEX>
}
 998:	23 c0       	rjmp	.+70     	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
		else if(sgu32_BCM_RX_BUFFER_INDEX==sgu32_BCM_RX_BUFFER_SIZE)
 99a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <sgu32_BCM_RX_BUFFER_INDEX>
 99e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <sgu32_BCM_RX_BUFFER_INDEX+0x1>
 9a2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sgu32_BCM_RX_BUFFER_SIZE>
 9a6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sgu32_BCM_RX_BUFFER_SIZE+0x1>
 9aa:	28 17       	cp	r18, r24
 9ac:	39 07       	cpc	r19, r25
 9ae:	c1 f4       	brne	.+48     	; 0x9e0 <BCM_UART_REC_ISR+0x13c>
			if(sgu32_BCM_RX_Buffer==sgu8_BCM_CheckSum)
 9b0:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <sgu8_BCM_CheckSum>
 9b4:	28 2f       	mov	r18, r24
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sgu32_BCM_RX_Buffer>
 9bc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <sgu32_BCM_RX_Buffer+0x1>
 9c0:	28 17       	cp	r18, r24
 9c2:	39 07       	cpc	r19, r25
 9c4:	21 f4       	brne	.+8      	; 0x9ce <BCM_UART_REC_ISR+0x12a>
				sgu8_BCM_RX_STATUS=BCM_RX_BUFFER_RECEIEVED_CHECKSUM_OK;
 9c6:	88 e0       	ldi	r24, 0x08	; 8
 9c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <BCM_UART_REC_ISR+0x130>
				sgu8_BCM_RX_STATUS=BCM_RX_BUFFER_RECEIEVED_CHECKSUM_NOK;				
 9ce:	89 e0       	ldi	r24, 0x09	; 9
 9d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
			sgu8_BCM_CheckSum=0U;
 9d4:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <sgu8_BCM_CheckSum>
			sgu32_BCM_RX_BUFFER_INDEX=0U;
 9d8:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <sgu32_BCM_RX_BUFFER_INDEX+0x1>
 9dc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <sgu32_BCM_RX_BUFFER_INDEX>
}
 9e0:	00 00       	nop
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	08 95       	ret

000009e8 <BCM_UART_TRANS_ISR>:
/*****BCM UART TRANSIMTER CALL BACK FUNCTION IN ISR****/
void BCM_UART_TRANS_ISR(void)
{
 9e8:	cf 93       	push	r28
 9ea:	df 93       	push	r29
 9ec:	cd b7       	in	r28, 0x3d	; 61
 9ee:	de b7       	in	r29, 0x3e	; 62
	sgu8_BCM_TX_FLAG=1U;
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <sgu8_BCM_TX_FLAG>
}
 9f6:	00 00       	nop
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	08 95       	ret

000009fe <BCM_Init>:
/*********Init BCM*********/
BCM_ERROR_t BCM_Init(BCM_Config_t* Copy_pBCM_Config)
{
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
 a06:	29 97       	sbiw	r28, 0x09	; 9
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	f8 94       	cli
 a0c:	de bf       	out	0x3e, r29	; 62
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	cd bf       	out	0x3d, r28	; 61
 a12:	99 87       	std	Y+9, r25	; 0x09
 a14:	88 87       	std	Y+8, r24	; 0x08
	if(NullPointer!=Copy_pBCM_Config)
 a16:	88 85       	ldd	r24, Y+8	; 0x08
 a18:	99 85       	ldd	r25, Y+9	; 0x09
 a1a:	89 2b       	or	r24, r25
 a1c:	09 f4       	brne	.+2      	; 0xa20 <BCM_Init+0x22>
 a1e:	51 c0       	rjmp	.+162    	; 0xac2 <BCM_Init+0xc4>
	{
		/**Register  BCM_ID to be able to seen by other functions***/
		sgu8_BCM_ID=Copy_pBCM_Config->BCM_ID;
 a20:	88 85       	ldd	r24, Y+8	; 0x08
 a22:	99 85       	ldd	r25, Y+9	; 0x09
 a24:	fc 01       	movw	r30, r24
 a26:	80 81       	ld	r24, Z
 a28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		/****Register size of maximum numbers of bytes could be sent for the other functions****/
		sgu32_BCM_Max_size_buffer=Copy_pBCM_Config->BCM_MAX_SIZE_OF_CHAR;
 a2c:	88 85       	ldd	r24, Y+8	; 0x08
 a2e:	99 85       	ldd	r25, Y+9	; 0x09
 a30:	fc 01       	movw	r30, r24
 a32:	81 81       	ldd	r24, Z+1	; 0x01
 a34:	92 81       	ldd	r25, Z+2	; 0x02
 a36:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <sgu32_BCM_Max_size_buffer+0x1>
 a3a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sgu32_BCM_Max_size_buffer>
		/***Register in variable sgu8_BCM_Type_of_communication the type of comm. for the other functions ***/
		sgu8_BCM_Type_of_communication=Copy_pBCM_Config->BCM_Type_of_Communication;
 a3e:	88 85       	ldd	r24, Y+8	; 0x08
 a40:	99 85       	ldd	r25, Y+9	; 0x09
 a42:	fc 01       	movw	r30, r24
 a44:	83 81       	ldd	r24, Z+3	; 0x03
 a46:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <sgu8_BCM_Type_of_communication>
		/***Register whether mode transmistion or reception***/
		sgu8_BCM_TX_State=Copy_pBCM_Config->BCM_Transimition_State;
 a4a:	88 85       	ldd	r24, Y+8	; 0x08
 a4c:	99 85       	ldd	r25, Y+9	; 0x09
 a4e:	fc 01       	movw	r30, r24
 a50:	84 81       	ldd	r24, Z+4	; 0x04
 a52:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <sgu8_BCM_TX_State>
		sgu8_BCM_RX_State=Copy_pBCM_Config->BCM_Reception_State;
 a56:	88 85       	ldd	r24, Y+8	; 0x08
 a58:	99 85       	ldd	r25, Y+9	; 0x09
 a5a:	fc 01       	movw	r30, r24
 a5c:	85 81       	ldd	r24, Z+5	; 0x05
 a5e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <sgu8_BCM_RX_State>
		/******************************************
		 * Check the type of communication and    * 
		 * whether it is transmision or reception * 
		 * or both of them and start initializtion*
		 ******************************************/
		 if(sgu8_BCM_Type_of_communication==UART)
 a62:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sgu8_BCM_Type_of_communication>
 a66:	88 23       	and	r24, r24
 a68:	11 f5       	brne	.+68     	; 0xaae <BCM_Init+0xb0>
		 {
		   
			 DIO_INIT_Pin(4,1);
 a6a:	61 e0       	ldi	r22, 0x01	; 1
 a6c:	84 e0       	ldi	r24, 0x04	; 4
 a6e:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
			 DIO_Write_Pin(4,1);
 a72:	61 e0       	ldi	r22, 0x01	; 1
 a74:	84 e0       	ldi	r24, 0x04	; 4
 a76:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
		
			 UART_Confg_Stuct_t BCM_UART_Config={sgu8_BCM_TX_State,
 a7a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <sgu8_BCM_TX_State>
 a7e:	89 83       	std	Y+1, r24	; 0x01
 a80:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sgu8_BCM_RX_State>
 a84:	8a 83       	std	Y+2, r24	; 0x02
 a86:	83 e3       	ldi	r24, 0x33	; 51
 a88:	8b 83       	std	Y+3, r24	; 0x03
 a8a:	1c 82       	std	Y+4, r1	; 0x04
 a8c:	83 e0       	ldi	r24, 0x03	; 3
 a8e:	8d 83       	std	Y+5, r24	; 0x05
 a90:	88 e0       	ldi	r24, 0x08	; 8
 a92:	8e 83       	std	Y+6, r24	; 0x06
 a94:	8a e0       	ldi	r24, 0x0A	; 10
 a96:	8f 83       	std	Y+7, r24	; 0x07
												  _bps_9600_, 
												  UART_Parity_Disabled, 
												  UART_One_Stop_bit, 
												  UART_Frame_8_bit_,
												  UART_Interrupt_mode_enable};
		     UART_Init(&BCM_UART_Config);
 a98:	ce 01       	movw	r24, r28
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	0e 94 12 03 	call	0x624	; 0x624 <UART_Init>
             UART_SetCallBack(BCM_UART_TRANS_ISR,BCM_UART_REC_ISR);		 
 aa0:	62 e5       	ldi	r22, 0x52	; 82
 aa2:	74 e0       	ldi	r23, 0x04	; 4
 aa4:	84 ef       	ldi	r24, 0xF4	; 244
 aa6:	94 e0       	ldi	r25, 0x04	; 4
 aa8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <UART_SetCallBack>
 aac:	0a c0       	rjmp	.+20     	; 0xac2 <BCM_Init+0xc4>
		 }
		 else if(sgu8_BCM_Type_of_communication==SPI)
 aae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sgu8_BCM_Type_of_communication>
 ab2:	81 30       	cpi	r24, 0x01	; 1
 ab4:	31 f0       	breq	.+12     	; 0xac2 <BCM_Init+0xc4>
		 {
		 }
		 else if(sgu8_BCM_Type_of_communication==I2C)
 ab6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sgu8_BCM_Type_of_communication>
 aba:	82 30       	cpi	r24, 0x02	; 2
 abc:	11 f0       	breq	.+4      	; 0xac2 <BCM_Init+0xc4>
		 {
		 }
		 else if(sgu8_BCM_Type_of_communication==CAN)
 abe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <sgu8_BCM_Type_of_communication>
		  
	}
	else
	{
    }
}
 ac2:	00 00       	nop
 ac4:	29 96       	adiw	r28, 0x09	; 9
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	08 95       	ret

00000ad6 <BCM_Setup_Receive>:
	{
	}

}
BCM_ERROR_t BCM_Setup_Receive(uint8_t* Copy_pu8_BCM_RX_Buffer,uint8_t Copy_pu32_BCM_RX_Buffer)
{
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
 ada:	00 d0       	rcall	.+0      	; 0xadc <BCM_Setup_Receive+0x6>
 adc:	00 d0       	rcall	.+0      	; 0xade <BCM_Setup_Receive+0x8>
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62
 ae2:	9b 83       	std	Y+3, r25	; 0x03
 ae4:	8a 83       	std	Y+2, r24	; 0x02
 ae6:	6c 83       	std	Y+4, r22	; 0x04

	/*Check the size of buffer is in the range of   initalized 
	  configuration or not by comparing size of buffer to the 
	  maximum size of buffer(sgu8_Max_size_buffer)*/
     if(BCM_RX_IDLE==sgu8_BCM_RX_STATUS)
 ae8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgu8_BCM_RX_STATUS>
 aec:	82 30       	cpi	r24, 0x02	; 2
 aee:	09 f0       	breq	.+2      	; 0xaf2 <BCM_Setup_Receive+0x1c>
 af0:	7a c0       	rjmp	.+244    	; 0xbe6 <BCM_Setup_Receive+0x110>
    {
		DIO_INIT_Pin(6,1);
 af2:	61 e0       	ldi	r22, 0x01	; 1
 af4:	86 e0       	ldi	r24, 0x06	; 6
 af6:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
		DIO_Write_Pin(6,1);
 afa:	61 e0       	ldi	r22, 0x01	; 1
 afc:	86 e0       	ldi	r24, 0x06	; 6
 afe:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
		sgu8p_BCM_RX_BUFFER=Copy_pu8_BCM_RX_Buffer;
 b02:	8a 81       	ldd	r24, Y+2	; 0x02
 b04:	9b 81       	ldd	r25, Y+3	; 0x03
 b06:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <sgu8p_BCM_RX_BUFFER+0x1>
 b0a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <sgu8p_BCM_RX_BUFFER>
		if(Copy_pu32_BCM_RX_Buffer<=sgu32_BCM_Max_size_buffer)
 b0e:	8c 81       	ldd	r24, Y+4	; 0x04
 b10:	28 2f       	mov	r18, r24
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <sgu32_BCM_Max_size_buffer>
 b18:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <sgu32_BCM_Max_size_buffer+0x1>
 b1c:	82 17       	cp	r24, r18
 b1e:	93 07       	cpc	r25, r19
 b20:	08 f4       	brcc	.+2      	; 0xb24 <BCM_Setup_Receive+0x4e>
 b22:	61 c0       	rjmp	.+194    	; 0xbe6 <BCM_Setup_Receive+0x110>
		{
			DIO_INIT_Pin(7,1);
 b24:	61 e0       	ldi	r22, 0x01	; 1
 b26:	87 e0       	ldi	r24, 0x07	; 7
 b28:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
			DIO_Write_Pin(7,1);
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	87 e0       	ldi	r24, 0x07	; 7
 b30:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
		  
			/*Put in the value global pointer to char (sgu8p_BCM_RX_BUFFER)for dipatcher to send and
			  also global for size and update status*/
			if(NullPointer!=Copy_pu8_BCM_RX_Buffer)
 b34:	8a 81       	ldd	r24, Y+2	; 0x02
 b36:	9b 81       	ldd	r25, Y+3	; 0x03
 b38:	89 2b       	or	r24, r25
 b3a:	09 f4       	brne	.+2      	; 0xb3e <BCM_Setup_Receive+0x68>
 b3c:	54 c0       	rjmp	.+168    	; 0xbe6 <BCM_Setup_Receive+0x110>
			{
			    DIO_INIT_Pin(8,1);
 b3e:	61 e0       	ldi	r22, 0x01	; 1
 b40:	88 e0       	ldi	r24, 0x08	; 8
 b42:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
			    DIO_Write_Pin(8,1);
 b46:	61 e0       	ldi	r22, 0x01	; 1
 b48:	88 e0       	ldi	r24, 0x08	; 8
 b4a:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
				if(sgu8_BCM_RX_lOCKED_INDEX>0)
 b4e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 b52:	88 23       	and	r24, r24
 b54:	f1 f0       	breq	.+60     	; 0xb92 <BCM_Setup_Receive+0xbc>
				{

					for(uint8_t u8_Index=0;u8_Index<sgu8_BCM_RX_lOCKED_INDEX;u8_Index++)
 b56:	19 82       	std	Y+1, r1	; 0x01
 b58:	16 c0       	rjmp	.+44     	; 0xb86 <BCM_Setup_Receive+0xb0>
					{
						if(sgu64_BCM_RX_lOCKED[u8_Index]==Copy_pu8_BCM_RX_Buffer) 
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
 b5c:	88 2f       	mov	r24, r24
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	86 58       	subi	r24, 0x86	; 134
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	fc 01       	movw	r30, r24
 b66:	80 81       	ld	r24, Z
 b68:	88 2f       	mov	r24, r24
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	9c 01       	movw	r18, r24
 b6e:	8a 81       	ldd	r24, Y+2	; 0x02
 b70:	9b 81       	ldd	r25, Y+3	; 0x03
 b72:	82 17       	cp	r24, r18
 b74:	93 07       	cpc	r25, r19
 b76:	21 f4       	brne	.+8      	; 0xb80 <BCM_Setup_Receive+0xaa>
						{
							sgu8_BCM_RX_STATUS=BCM_RX_REQ_NOT_CONFIRMED_BUFFER_IS_LOCKED;
 b78:	83 e0       	ldi	r24, 0x03	; 3
 b7a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
							break;
 b7e:	33 c0       	rjmp	.+102    	; 0xbe6 <BCM_Setup_Receive+0x110>
					for(uint8_t u8_Index=0;u8_Index<sgu8_BCM_RX_lOCKED_INDEX;u8_Index++)
 b80:	89 81       	ldd	r24, Y+1	; 0x01
 b82:	8f 5f       	subi	r24, 0xFF	; 255
 b84:	89 83       	std	Y+1, r24	; 0x01
 b86:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 b8a:	99 81       	ldd	r25, Y+1	; 0x01
 b8c:	98 17       	cp	r25, r24
 b8e:	28 f3       	brcs	.-54     	; 0xb5a <BCM_Setup_Receive+0x84>
 b90:	2a c0       	rjmp	.+84     	; 0xbe6 <BCM_Setup_Receive+0x110>
						}
					}
				}
                else
                {
					DIO_INIT_Pin(13,1);
 b92:	61 e0       	ldi	r22, 0x01	; 1
 b94:	8d e0       	ldi	r24, 0x0D	; 13
 b96:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
					DIO_Write_Pin(13,1);
 b9a:	61 e0       	ldi	r22, 0x01	; 1
 b9c:	8d e0       	ldi	r24, 0x0D	; 13
 b9e:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
				    sgu8p_BCM_RX_BUFFER=Copy_pu8_BCM_RX_Buffer;
 ba2:	8a 81       	ldd	r24, Y+2	; 0x02
 ba4:	9b 81       	ldd	r25, Y+3	; 0x03
 ba6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <sgu8p_BCM_RX_BUFFER+0x1>
 baa:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <sgu8p_BCM_RX_BUFFER>
				    sgu32_BCM_RX_BUFFER_SIZE=Copy_pu32_BCM_RX_Buffer;
 bae:	8c 81       	ldd	r24, Y+4	; 0x04
 bb0:	88 2f       	mov	r24, r24
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <sgu32_BCM_RX_BUFFER_SIZE+0x1>
 bb8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <sgu32_BCM_RX_BUFFER_SIZE>
					sgu64_BCM_RX_lOCKED[sgu8_BCM_RX_lOCKED_INDEX]=sgu8p_BCM_RX_BUFFER;
 bbc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <sgu8p_BCM_RX_BUFFER>
 bc0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <sgu8p_BCM_RX_BUFFER+0x1>
 bc4:	9c 01       	movw	r18, r24
 bc6:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 bca:	88 2f       	mov	r24, r24
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	86 58       	subi	r24, 0x86	; 134
 bd0:	9f 4f       	sbci	r25, 0xFF	; 255
 bd2:	fc 01       	movw	r30, r24
 bd4:	20 83       	st	Z, r18
					sgu8_BCM_RX_lOCKED_INDEX++;
 bd6:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 bda:	8f 5f       	subi	r24, 0xFF	; 255
 bdc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
					sgu8_BCM_RX_STATUS=BCM_RX_REQ_CONFIRMED;
 be0:	8d e0       	ldi	r24, 0x0D	; 13
 be2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
	}
	else
	{
	}
  		
}
 be6:	00 00       	nop
 be8:	0f 90       	pop	r0
 bea:	0f 90       	pop	r0
 bec:	0f 90       	pop	r0
 bee:	0f 90       	pop	r0
 bf0:	df 91       	pop	r29
 bf2:	cf 91       	pop	r28
 bf4:	08 95       	ret

00000bf6 <BCM_RxDispatcher>:
BCM_ERROR_t BCM_RxDispatcher(PntrToFunc_t Copy_PntrToFun_RxDispatcher)
{
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	00 d0       	rcall	.+0      	; 0xbfc <BCM_RxDispatcher+0x6>
 bfc:	cd b7       	in	r28, 0x3d	; 61
 bfe:	de b7       	in	r29, 0x3e	; 62
 c00:	9a 83       	std	Y+2, r25	; 0x02
 c02:	89 83       	std	Y+1, r24	; 0x01
	if(BCM_RX_BUFFER_RECEIEVED_CHECKSUM_OK==sgu8_BCM_RX_STATUS)
 c04:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sgu8_BCM_RX_STATUS>
 c08:	88 30       	cpi	r24, 0x08	; 8
 c0a:	79 f4       	brne	.+30     	; 0xc2a <BCM_RxDispatcher+0x34>
	{
		Copy_PntrToFun_RxDispatcher();
 c0c:	89 81       	ldd	r24, Y+1	; 0x01
 c0e:	9a 81       	ldd	r25, Y+2	; 0x02
 c10:	fc 01       	movw	r30, r24
 c12:	09 95       	icall
		DIO_INIT_Pin(10,1);
 c14:	61 e0       	ldi	r22, 0x01	; 1
 c16:	8a e0       	ldi	r24, 0x0A	; 10
 c18:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
		DIO_Write_Pin(10,1);
 c1c:	61 e0       	ldi	r22, 0x01	; 1
 c1e:	8a e0       	ldi	r24, 0x0A	; 10
 c20:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
		sgu8_BCM_RX_STATUS=BCM_RX_IDLE;
 c24:	82 e0       	ldi	r24, 0x02	; 2
 c26:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sgu8_BCM_RX_STATUS>
	else
	{
		
	}

}
 c2a:	00 00       	nop
 c2c:	0f 90       	pop	r0
 c2e:	0f 90       	pop	r0
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
 c34:	08 95       	ret

00000c36 <BCM_RxUnlock>:
	{
	}

}
BCM_ERROR_t BCM_RxUnlock(uint8_t*Copy_pu8_BCM_RX_Buffer)
{
 c36:	cf 93       	push	r28
 c38:	df 93       	push	r29
 c3a:	00 d0       	rcall	.+0      	; 0xc3c <BCM_RxUnlock+0x6>
 c3c:	0f 92       	push	r0
 c3e:	cd b7       	in	r28, 0x3d	; 61
 c40:	de b7       	in	r29, 0x3e	; 62
 c42:	9b 83       	std	Y+3, r25	; 0x03
 c44:	8a 83       	std	Y+2, r24	; 0x02
	/**Let the BCM_RX_STATUS unlock and ready writing the new packet**/
	if(sgu8_BCM_RX_lOCKED_INDEX>0)
 c46:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 c4a:	88 23       	and	r24, r24
 c4c:	71 f1       	breq	.+92     	; 0xcaa <BCM_RxUnlock+0x74>
	{

		for(uint8_t u8_Index=0;u8_Index<sgu8_BCM_RX_lOCKED_INDEX;u8_Index++)
 c4e:	19 82       	std	Y+1, r1	; 0x01
 c50:	27 c0       	rjmp	.+78     	; 0xca0 <BCM_RxUnlock+0x6a>
		{

			if(sgu64_BCM_RX_lOCKED[u8_Index]==Copy_pu8_BCM_RX_Buffer) 
 c52:	89 81       	ldd	r24, Y+1	; 0x01
 c54:	88 2f       	mov	r24, r24
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	86 58       	subi	r24, 0x86	; 134
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	fc 01       	movw	r30, r24
 c5e:	80 81       	ld	r24, Z
 c60:	88 2f       	mov	r24, r24
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	9c 01       	movw	r18, r24
 c66:	8a 81       	ldd	r24, Y+2	; 0x02
 c68:	9b 81       	ldd	r25, Y+3	; 0x03
 c6a:	82 17       	cp	r24, r18
 c6c:	93 07       	cpc	r25, r19
 c6e:	a9 f4       	brne	.+42     	; 0xc9a <BCM_RxUnlock+0x64>
			{
			    DIO_INIT_Pin(14,1);
 c70:	61 e0       	ldi	r22, 0x01	; 1
 c72:	8e e0       	ldi	r24, 0x0E	; 14
 c74:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_INIT_Pin>
		        DIO_Write_Pin(14,1);
 c78:	61 e0       	ldi	r22, 0x01	; 1
 c7a:	8e e0       	ldi	r24, 0x0E	; 14
 c7c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Write_Pin>
				sgu64_BCM_RX_lOCKED[u8_Index]=BCM_RX_UNLOCKED;
 c80:	89 81       	ldd	r24, Y+1	; 0x01
 c82:	88 2f       	mov	r24, r24
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	86 58       	subi	r24, 0x86	; 134
 c88:	9f 4f       	sbci	r25, 0xFF	; 255
 c8a:	fc 01       	movw	r30, r24
 c8c:	10 82       	st	Z, r1
				sgu8_BCM_RX_lOCKED_INDEX--;
 c8e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 c92:	81 50       	subi	r24, 0x01	; 1
 c94:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
				break;
 c98:	08 c0       	rjmp	.+16     	; 0xcaa <BCM_RxUnlock+0x74>
		for(uint8_t u8_Index=0;u8_Index<sgu8_BCM_RX_lOCKED_INDEX;u8_Index++)
 c9a:	89 81       	ldd	r24, Y+1	; 0x01
 c9c:	8f 5f       	subi	r24, 0xFF	; 255
 c9e:	89 83       	std	Y+1, r24	; 0x01
 ca0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <sgu8_BCM_RX_lOCKED_INDEX>
 ca4:	99 81       	ldd	r25, Y+1	; 0x01
 ca6:	98 17       	cp	r25, r24
 ca8:	a0 f2       	brcs	.-88     	; 0xc52 <BCM_RxUnlock+0x1c>
			}
		}
	}
 caa:	00 00       	nop
 cac:	0f 90       	pop	r0
 cae:	0f 90       	pop	r0
 cb0:	0f 90       	pop	r0
 cb2:	df 91       	pop	r29
 cb4:	cf 91       	pop	r28
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
